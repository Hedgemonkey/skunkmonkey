import { defineConfig } from 'vite';
import { resolve } from 'path';

// Set base path to /static/ for production, / for development
const basePath = process.env.NODE_ENV === 'production' ? '/static/' : '/';

export default defineConfig({
  base: basePath,
  resolve: {
    alias: {
      '@common': resolve(__dirname, 'src/common'),
      '@products': resolve(__dirname, 'src/products'),
      '@shop': resolve(__dirname, 'src/shop'),
      '@users': resolve(__dirname, 'src/users'),
      '@staff': resolve(__dirname, 'src/staff'),
      '@core': resolve(__dirname, 'src/core'),
      '@image_cropper': resolve(__dirname, 'src/common/js/image_cropper.js')
    }
  },
  build: {
    outDir: '../static', // Output to static directory in project root
    assetsDir: 'assets', // Place all assets in a dedicated directory
    emptyOutDir: false,
    manifest: true, // Explicitly generate manifest.json
    minify: true,
    // Ensure chunks are generated by disabling inlining limits
    chunkSizeWarningLimit: 2000, // Increased to prevent warnings
    rollupOptions: {        input: {
        main: resolve(__dirname, 'src/core/js/main.js'),
        djangoMessages: resolve(__dirname, 'src/core/js/django-messages.js'),
        assetHealth: resolve(__dirname, 'src/core/js/asset-health.js'),
        home: resolve(__dirname, 'src/home/js/home.js'),
        // Testing script
        "test-assets": resolve(__dirname, 'src/core/js/test-assets.js'),
        // Common modules
        imageCropper: resolve(__dirname, 'src/common/js/image_cropper.js'),
        apiClient: resolve(__dirname, 'src/common/js/api-client.js'),
        // Products
        products: resolve(__dirname, 'src/products/js/products.js'),
        productManageUrls: resolve(__dirname, 'src/products/js/product-manage-urls.js'),
        filters: resolve(__dirname, 'src/products/js/filters.js'),
        cropperInit: resolve(__dirname, 'src/products/js/cropper_init.js'),
        categoryManager: resolve(__dirname, 'src/products/js/category-manager.js'),
        productsManager: resolve(__dirname, 'src/products/js/product-manager.js'),
        formUtils: resolve(__dirname, 'src/products/utilities/js/form-utils.js'),
        arrayUtils: resolve(__dirname, 'src/products/utilities/js/array-utils.js'),
        baseManager: resolve(__dirname, 'src/products/utilities/js/base-manager.js'),
        notifications: resolve(__dirname, 'src/products/utilities/js/notifications.js'),
        categoryFilterManager: resolve(
          __dirname, 'src/products/filters/js/category-filter-manager.js'
        ),
        filterUiManager: resolve(
          __dirname, 'src/products/filters/js/filter-ui-manager.js'
        ),
        // Shop
        cartManager: resolve(__dirname, 'src/shop/js/cart-manager.js'),
        quantityModalManager: resolve(__dirname, 'src/shop/js/quantity-modal-manager.js'),
        catalogManager: resolve(__dirname, 'src/shop/js/catalog-manager.js'),
        wishlistInitializer: resolve(__dirname, 'src/shop/js/wishlist-initializer.js'),
        // Renamed these entries to match how the direct_asset tag looks up files
        productList: resolve(__dirname, 'src/shop/js/product-list-manager.js'),
        productDetail: resolve(__dirname, 'src/shop/js/product-detail-manager.js'),
        comparison: resolve(__dirname, 'src/shop/js/comparison-manager.js'),
        checkout: resolve(__dirname, 'src/shop/js/checkout.js'),
        checkoutSuccess: resolve(__dirname, 'src/shop/js/checkout-success.js'),
        checkoutManager: resolve(__dirname, 'src/shop/js/checkout-manager.js'),
        productGrid: resolve(__dirname, 'src/shop/js/product-grid.js'),
        productFilters: resolve(__dirname, 'src/shop/js/product-filters.js'),
        stripeIntegration: resolve(__dirname, 'src/shop/js/stripe-integration.js'),
        shopNotifications: resolve(__dirname, 'src/shop/utilities/js/notifications.js'),
        // Users
        profile: resolve(__dirname, 'src/users/js/profile.js'),
        profileCropper: resolve(__dirname, 'src/users/js/profile_cropper.js'),
        profileImageManager: resolve(__dirname, 'src/users/js/profile_image_manager.js'),
        accountActions: resolve(__dirname, 'src/users/js/account_actions.js'),
        addressManagement: resolve(__dirname, 'src/users/js/address-management.js'),
        // Staff
        staff: resolve(__dirname, 'src/staff/js/staff.js'),
        staffSidebar: resolve(__dirname, 'src/staff/js/staff-sidebar.js'),
        productFormInit: resolve(__dirname, 'src/staff/js/product-form-init.js'),
        orderManager: resolve(__dirname, 'src/staff/js/order-manager.js'),
        staffProductManager: resolve(__dirname, 'src/staff/js/product-manager.js'),
        productManager: resolve(__dirname, 'src/staff/js/product-manager.js'),
        productDashboard: resolve(__dirname, 'src/staff/js/product-dashboard.js'),
        productEdit: resolve(__dirname, 'src/staff/js/product-editor.js'),
        // New standalone charts script - specifically for product dashboard
        productDashboardCharts: resolve(__dirname, 'src/staff/js/product-dashboard-charts.js'),
        // Category management
        categoryManagement: resolve(__dirname, 'src/staff/js/entry/category-management.js'),
      },
      output: {
        // Simple, explicit file naming
        chunkFileNames: 'js/chunks/[name].[hash].js',

        // App-based file naming following js/[app]/[filename] pattern
        entryFileNames: (chunkInfo) => {
          const name = chunkInfo.name;

          // Explicit mapping for each entry point by app
          const entryMap = {
            // Core
            'main': 'js/core/main.js',
            'djangoMessages': 'js/core/djangoMessages.js',
            'assetHealth': 'js/core/assetHealth.js',
            'home': 'js/home/home.js',
            'test-assets': 'js/core/test-assets.js',

            // Common utilities
            'imageCropper': 'js/common/imageCropper.js',
            'apiClient': 'js/common/apiClient.js',

            // Products
            'products': 'js/products/products.js',
            'productManageUrls': 'js/products/productManageUrls.js',
            'filters': 'js/products/filters.js',
            'cropperInit': 'js/products/cropperInit.js',
            'categoryManager': 'js/products/categoryManager.js',
            'productsManager': 'js/products/productsManager.js',
            'formUtils': 'js/products/formUtils.js',
            'arrayUtils': 'js/products/arrayUtils.js',
            'baseManager': 'js/products/baseManager.js',
            'notifications': 'js/products/notifications.js',
            'categoryFilterManager': 'js/products/categoryFilterManager.js',
            'filterUiManager': 'js/products/filterUiManager.js',

            // Shop
            'cartManager': 'js/shop/cartManager.js',
            'quantityModalManager': 'js/shop/quantityModalManager.js',
            'catalogManager': 'js/shop/catalogManager.js',
            'wishlistInitializer': 'js/shop/wishlistInitializer.js',
            'productList': 'js/shop/productList.js',
            'productDetail': 'js/shop/productDetail.js',
            'comparison': 'js/shop/comparison.js',
            'checkout': 'js/shop/checkout.js',
            'checkoutSuccess': 'js/shop/checkoutSuccess.js',
            'checkoutManager': 'js/shop/checkoutManager.js',
            'productGrid': 'js/shop/productGrid.js',
            'productFilters': 'js/shop/productFilters.js',
            'stripeIntegration': 'js/shop/stripeIntegration.js',
            'shopNotifications': 'js/shop/shopNotifications.js',

            // Users
            'profile': 'js/users/profile.js',
            'profileCropper': 'js/users/profileCropper.js',
            'profileImageManager': 'js/users/profileImageManager.js',
            'accountActions': 'js/users/accountActions.js',
            'addressManagement': 'js/users/addressManagement.js',

            // Staff
            'staff': 'js/staff/staff.js',
            'staffSidebar': 'js/staff/staffSidebar.js',
            'productFormInit': 'js/staff/productFormInit.js',
            'orderManager': 'js/staff/orderManager.js',
            'staffProductManager': 'js/staff/staffProductManager.js',
            'productManager': 'js/staff/productManager.js',
            'productDashboard': 'js/staff/productDashboard.js',
            'productEdit': 'js/staff/productEdit.js',  // This is the key one!
            'productDashboardCharts': 'js/staff/productDashboardCharts.js',
            'categoryManagement': 'js/staff/categoryManagement.js',
          };

          return entryMap[name] || `js/common/${name}.js`;
        },

        // App-based CSS naming following css/[app]/[filename] pattern
        assetFileNames: (assetInfo) => {
          if (assetInfo.name && assetInfo.name.endsWith('.css')) {
            const name = assetInfo.name.replace('.css', '');

            // Map CSS files to appropriate app directories
            const cssMap = {
              'main': 'css/core/main.css',
              'home': 'css/home/home.css',
              'products': 'css/products/products.css',
              'productList': 'css/shop/productList.css',
              'productDetail': 'css/shop/productDetail.css',
              'checkout': 'css/shop/checkout.css',
              'cartManager': 'css/shop/cartManager.css',
              'wishlistInitializer': 'css/shop/wishlist.css',
              'wishlistManager': 'css/shop/wishlistManager.css',
              'profile': 'css/users/profile.css',
              'staff': 'css/staff/staff.css',
              'productEdit': 'css/staff/productEdit.css',  // This is the key one!
              'productDashboard': 'css/staff/productDashboard.css',
              'orderManager': 'css/staff/orderManager.css',
              'categoryManagement': 'css/staff/categoryManagement.css',
            };

            return cssMap[name] || `css/common/${name}.css`;
          }
          return 'assets/[name].[hash][extname]';
        },
        // Vendor code chunks with consistent naming and proper paths
        manualChunks(id) {
          if (id.includes('node_modules')) {
            // Use more specific chunk names to avoid conflicts
            if (id.includes('bootstrap')) return 'chunks/vendor/bootstrap';
            if (id.includes('chart.js')) return 'chunks/vendor/chartjs';
            if (id.includes('@fortawesome')) return 'chunks/vendor/fontawesome';

            // Place all other vendor code in a common chunk for better caching
            return 'chunks/vendor/common';
          }

          // Handle core shared functionality for staff.js
          if (id.includes('src/core/shared') || id.includes('src/core/utils')) {
            return 'core/index2';
          }
        }
      }
    }
  },
  server: {
    // Dev server settings
    port: 5173,
    open: false,
    strictPort: true,
    origin: 'http://localhost:5173'
  }
});
