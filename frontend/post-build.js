/**
 * post-build.js - Handles post-build operations after Vite build
 *
 * This script:
 * 1. Copies manifest.json to both /static/ and /staticfiles/ locations
 * 2. Creates empty directories for sections that might not have assets yet
 * 3. Ensures product dashboard files are correctly placed in staff directory
 * 4. Creates fixed vendor chunk aliases to prevent import errors
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Get current directory
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Source manifest path (generated by Vite in .vite directory)
const sourceManifestPath = path.join(__dirname, '../static/.vite/manifest.json');

// Destination paths - ensure both static and staticfiles have identical manifests
const staticManifestPath = path.join(__dirname, '../static/manifest.json');
const staticfilesManifestPath = path.join(__dirname, '../staticfiles/manifest.json');

console.log('Running post-build operations...');

try {
    // Check if manifest exists
    if (fs.existsSync(sourceManifestPath)) {
        // Read the manifest file
        const manifestData = fs.readFileSync(sourceManifestPath, 'utf-8');

        // Parse the manifest to potentially modify it
        let manifest;
        try {
            manifest = JSON.parse(manifestData);
            console.log(`✅ Parsed manifest with ${Object.keys(manifest).length} entries`);
        } catch (e) {
            console.error(`❌ Error parsing manifest: ${e.message}`);
            manifest = {};
        }

        // Write it to both destinations to ensure consistency
        const stringifiedManifest = JSON.stringify(manifest, null, 2);
        fs.writeFileSync(staticManifestPath, stringifiedManifest);
        console.log(`✅ Copied manifest.json to ${staticManifestPath}`);

        // Create staticfiles directory if it doesn't exist
        const staticfilesDir = path.dirname(staticfilesManifestPath);
        if (!fs.existsSync(staticfilesDir)) {
            fs.mkdirSync(staticfilesDir, { recursive: true });
        }

        // Also write to staticfiles location for production
        fs.writeFileSync(staticfilesManifestPath, stringifiedManifest);
        console.log(`✅ Copied manifest.json to ${staticfilesManifestPath}`);

        // Handle special case for productDashboard.js
        const staffJsDir = path.join(__dirname, '../static/js/staff');
        const productsDashboardSrc = path.join(__dirname, '../static/js/core/productDashboard.js');
        const productsDashboardDest = path.join(staffJsDir, 'productDashboard.js');

        // Ensure the staff directory exists
        if (!fs.existsSync(staffJsDir)) {
            fs.mkdirSync(staffJsDir, { recursive: true });
            console.log(`✅ Created staff js directory: ${staffJsDir}`);
        }

        // Copy product dashboard to staff directory if found in core
        if (fs.existsSync(productsDashboardSrc)) {
            fs.copyFileSync(productsDashboardSrc, productsDashboardDest);
            console.log(`✅ Copied productDashboard.js to staff directory for better path resolution`);
        }

        // Verify important directories exist
        const baseDir = path.join(__dirname, '../static');
        const sections = ['core', 'home', 'products', 'shop', 'users', 'staff', 'common', 'chunks', 'vendor'];

        console.log('Checking asset directory structure:');

        // Check each section directory
        for (const section of sections) {
            const jsDir = path.join(baseDir, 'js', section);
            const cssDir = path.join(baseDir, 'css', section);

            if (!fs.existsSync(jsDir)) {
                fs.mkdirSync(jsDir, { recursive: true });
                console.log(`  Created missing directory: js/${section}`);

                // Create a placeholder file in empty directories to ensure Git tracks them
                const placeholderPath = path.join(jsDir, '.gitkeep');
                if (!fs.existsSync(placeholderPath)) {
                    fs.writeFileSync(placeholderPath, '# This file ensures the directory is tracked in Git\n');
                    console.log(`  Added placeholder file in js/${section}/.gitkeep`);
                }
            }

            if (!fs.existsSync(cssDir)) {
                fs.mkdirSync(cssDir, { recursive: true });
                console.log(`  Created missing directory: css/${section}`);

                // Create a placeholder file in empty directories to ensure Git tracks them
                const placeholderPath = path.join(cssDir, '.gitkeep');
                if (!fs.existsSync(placeholderPath)) {
                    fs.writeFileSync(placeholderPath, '# This file ensures the directory is tracked in Git\n');
                    console.log(`  Added placeholder file in css/${section}/.gitkeep`);
                }
            }
        }

        console.log('✅ Directory structure verified');
    } else {
        console.error(`❌ Source manifest not found at ${sourceManifestPath}`);
    }
} catch (error) {
    console.error('Error during post-build operations:', error);
    process.exit(1);
}

console.log('✅ Post-build operations completed successfully');
