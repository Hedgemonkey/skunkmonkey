import{A as m}from"./apiClient.js";/* empty css                       */import"./ajax_helper.77meLuHN.js";import"./vendor-common.B4uieipM.js";class w{constructor(){this.toastQueue=[],this.processingToast=!1,this.debug=!0,this.wishlistItems=new Set,this.initialize()}initialize(){try{this.initializeWishlistItems(),this.initEventListeners(),this.checkSweetAlert2Availability(),document.addEventListener("swal2-initialized",()=>{this.log("SweetAlert2 initialized event received, processing queued toasts"),this.processToastQueue()})}catch(t){console.error("Error initializing Wishlist Manager:",t)}}initializeWishlistItems(){const t=document.querySelectorAll(".wishlist-count");if(t.length>0){const s=parseInt(t[0].textContent,10);this.log("Initial wishlist count:",s)}document.querySelectorAll(".remove-wishlist-btn, .wishlist-btn.active").forEach(s=>{const i=s.dataset.productId;i&&(this.wishlistItems.add(i),this.log("Added product to initial wishlist set:",i))});const e=document.getElementById("wishlist-data");if(e)try{const s=JSON.parse(e.value);Array.isArray(s)&&(s.forEach(i=>this.wishlistItems.add(i.toString())),this.log("Initialized wishlist items from data element:",s))}catch(s){console.error("Error parsing wishlist data:",s)}this.log("Initialized wishlist items:",[...this.wishlistItems])}log(...t){this.debug&&console.log("[WishlistManager]",...t)}checkSweetAlert2Availability(){typeof window.Swal<"u"?(this.log("SweetAlert2 is available for WishlistManager."),document.dispatchEvent(new Event("swal2-initialized"))):(console.warn("SweetAlert2 is not available for WishlistManager. Toast notifications will fall back to alerts."),window.addEventListener("load",()=>{setTimeout(()=>{typeof window.Swal<"u"?(this.log("SweetAlert2 became available after window load"),document.dispatchEvent(new Event("swal2-initialized"))):this.loadSweetAlert2Dynamically()},500)}))}loadSweetAlert2Dynamically(){if(typeof window.Swal>"u"){this.log("Attempting to load SweetAlert2 dynamically");const t=document.createElement("script");t.src="https://cdn.jsdelivr.net/npm/sweetalert2@11",t.onload=()=>{this.log("SweetAlert2 loaded dynamically"),document.dispatchEvent(new Event("swal2-initialized"))},t.onerror=e=>{console.error("Failed to load SweetAlert2 dynamically:",e)},document.head.appendChild(t)}}initEventListeners(){const t=".wishlist-btn, .add-to-wishlist-btn, .remove-wishlist-btn";document.querySelectorAll(t).forEach(e=>{e.hasAttribute("data-event-bound")||(e.setAttribute("data-event-bound","true"),e.addEventListener("click",s=>{s.preventDefault(),this.handleWishlistToggle(s)}))}),document.addEventListener("click",e=>{const s=e.target.closest(t);s&&!s.hasAttribute("data-event-bound")&&(s.getAttribute("data-event-bound")||(s.setAttribute("data-event-bound","true"),s.addEventListener("click",i=>{i.preventDefault(),this.handleWishlistToggle(i)}),this.handleWishlistToggle(e),e.preventDefault()))}),this.setupMutationObserver(),this.log("Wishlist event listeners initialized")}setupMutationObserver(){const t=".wishlist-btn:not([data-event-bound]), .add-to-wishlist-btn:not([data-event-bound]), .remove-wishlist-btn:not([data-event-bound])";new MutationObserver(s=>{s.forEach(i=>{i.type==="childList"&&i.addedNodes.length>0&&i.addedNodes.forEach(o=>{o.nodeType===Node.ELEMENT_NODE&&(o.matches(t)&&this.bindWishlistButtonListener(o),o.querySelectorAll(t).forEach(c=>{this.bindWishlistButtonListener(c)}))})})}).observe(document.body,{childList:!0,subtree:!0}),this.log("Mutation observer set up for wishlist buttons.")}bindWishlistButtonListener(t){t.hasAttribute("data-event-bound")||(t.setAttribute("data-event-bound","true"),t.addEventListener("click",e=>{e.preventDefault(),this.handleWishlistToggle(e)}),this.log("Bound listener to dynamically added button:",t))}handleWishlistToggle(t){const e=t.currentTarget||t.target.closest(".wishlist-btn, .add-to-wishlist-btn, .remove-wishlist-btn");if(!e){this.log("Wishlist toggle handler called but no button found.");return}if(e.classList.contains("disabled")){this.log("Button already processing, ignoring click.");return}const s=e.dataset.productId;if(!s){console.error("Wishlist button missing data-product-id:",e),this.showToast("Error","Product ID missing.","error");return}const i=e.dataset.productName||"Product",o=this.wishlistItems.has(s);this.log(`Toggling product ${s}: Currently in Wishlist? ${o}`);const r=e.innerHTML;let c=e.disabled;e.innerHTML='<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>',e.disabled=!0,e.classList.add("disabled");const u=`/shop/wishlist/toggle/${s}/`;this.log("POSTing to:",u),m.post(u,{product_id:s}).then(n=>{this.log("Raw response:",n);let a;try{if(typeof n=="object"&&n!==null)a=n;else if(typeof n=="string"&&n.trim()!=="")a=JSON.parse(n);else throw new Error("Invalid or empty response")}catch(h){return console.error("Parse error:",h,"Raw:",n),this.showToast("Error","Received invalid data.","error"),{finalState:o,errorOccurred:!0}}let l=o,d=!1;if(typeof a.success=="boolean"&&a.success){d=!0,a.isInWishlist!==void 0?l=a.isInWishlist:a.added!==void 0?l=a.added:a.removed!==void 0?l=!a.removed:(l=!o,this.log("Warning: Server response did not explicitly state added/removed/isInWishlist status. Inferring state.")),this.log("API Success. Final state:",l),l?this.wishlistItems.add(s):this.wishlistItems.delete(s),this.log("Updated local Set:",[...this.wishlistItems]);const h=l?"Added to":"Removed from";this.showToast(`${h} Wishlist`,a.message||`${i} ${h.toLowerCase()} wishlist.`,l?"success":"info"),a.wishlist_count!==void 0&&this.updateWishlistCount(a.wishlist_count),!l&&window.location.pathname.includes("/wishlist/")&&this.removeItemFromWishlistPage(e)}else d=!1,this.log("API Failure:",a.message||a.error||"Unknown error."),this.showToast("Error",a.message||a.error||"Failed to update.","error");return{finalState:l,errorOccurred:!d}}).catch(n=>{console.error("API Call Error:",n);let a="Update failed. Check connection.";return n&&typeof n=="object"?a=n.message||n.response&&n.response.data&&(n.response.data.detail||n.response.data.error)||a:typeof n=="string"&&(a=n),this.showToast("Error",a,"error"),{finalState:o,errorOccurred:!0}}).finally(()=>{const n=this.wishlistItems.has(s);this.log(`Finally block. Definitive final state from Set: ${n}. Restoring button ${s}.`),document.querySelectorAll(`.wishlist-btn[data-product-id="${s}"], .add-to-wishlist-btn[data-product-id="${s}"], .remove-wishlist-btn[data-product-id="${s}"]`).forEach(l=>{const d=l.querySelector("span.spinner-border");d&&l.children.length===1&&l.firstChild===d?(l.innerHTML=r,this.log("Restored original content for button:",l)):this.log("Button content not just spinner, skipping content restore for:",l),l.disabled=c,l.classList.remove("disabled","wishlist-btn-active"),this.updateWishlistButtonVisualState(l,n)}),this.updateWishlistCount(this.wishlistItems.size),this.log(`Finished processing toggle for product ${s}.`)})}updateAllButtonsForProduct(t,e){if(!t)return;this.log(`Updating all buttons for product ${t} to state: ${e?"IN wishlist":"NOT in wishlist"}`);const s=document.querySelectorAll(`.wishlist-btn[data-product-id="${t}"], .add-to-wishlist-btn[data-product-id="${t}"], .remove-wishlist-btn[data-product-id="${t}"]`);if(s.length===0){this.log(`No buttons found for product ${t} to update.`);return}s.forEach(i=>{this.updateWishlistButtonVisualState(i,e),i.classList.remove("disabled","wishlist-btn-active"),i.querySelector(".spinner-border")})}updateWishlistButtonVisualState(t,e){if(!t)return;const s=t.dataset.productName||"this product",i=t.dataset.productId,o=t.querySelector("i");e?(t.classList.remove("add-to-wishlist-btn"),t.classList.add("remove-wishlist-btn","active")):(t.classList.remove("remove-wishlist-btn","active"),t.classList.add("add-to-wishlist-btn")),o&&(e?(o.classList.remove("far","fa-heart-broken","fa-heart-o"),o.classList.add("fas","fa-heart")):(o.classList.remove("fas","fa-heart-broken","fa-heart","fa-heart-o"),o.classList.add("far","fa-heart"))),e?(t.setAttribute("title",`Remove ${s} from wishlist`),t.setAttribute("aria-label",`Remove ${s} from wishlist`)):(t.setAttribute("title",`Add ${s} to wishlist`),t.setAttribute("aria-label",`Add ${s} to wishlist`)),i&&t.setAttribute("href",`/shop/wishlist/toggle/${i}/`),t.setAttribute("data-visual-state-set",e?"in":"out")}removeItemFromWishlistPage(t){const e=t.closest(".product-card, .wishlist-item");if(!e){this.log("Could not find product card/item to remove from wishlist page.");return}const i=e.closest(".col, .wishlist-item-container, li, div.product-entry")||e;this.log("Removing wishlist item element:",i),i.style.transition="opacity 0.5s ease, transform 0.5s ease, height 0.5s ease, margin 0.5s ease, padding 0.5s ease",i.style.opacity="0",i.style.transform="scale(0.8)",i.style.height="0",i.style.marginTop="0",i.style.marginBottom="0",i.style.paddingTop="0",i.style.paddingBottom="0",i.style.borderWidth="0",setTimeout(()=>{i.remove(),this.log("Wishlist item removed from DOM.");const o=document.querySelectorAll(".product-card, .wishlist-item");this.log("Remaining wishlist items on page:",o.length),o.length===0?this.displayEmptyWishlistMessage():this.updateWishlistCount(o.length)},500)}displayEmptyWishlistMessage(){this.log("Displaying empty wishlist message.");const t=document.querySelector(".container main, .wishlist-container, .content-section, #main-content");if(t){const s=t.querySelector(".row.wishlist-items, #wishlist-items-container")||t;s.innerHTML=`
                <div class="empty-wishlist alert alert-info text-center my-5 col-12">
                    <i class="fas fa-heart-broken fa-3x mb-3"></i>
                    <h3 class="alert-heading">Your Wishlist is Empty</h3>
                    <p class="lead mb-4">You haven't added any products yet. Start exploring!</p>
                    <a href="/shop/" class="btn btn-primary btn-lg">
                        <i class="fas fa-shopping-bag me-2"></i>Browse Products
                    </a>
                </div>
            `,this.updateWishlistCount(0)}else this.log("Could not find main content area to display empty wishlist message.")}updateWishlistCount(t){t!==void 0&&!isNaN(t)?(this.log("Updating wishlist count UI elements to:",t),document.querySelectorAll(".wishlist-count").forEach(e=>{e.textContent=t,e.classList.add("animate__animated","animate__bounceIn"),e.onanimationend=()=>e.classList.remove("animate__animated","animate__bounceIn");const s=e.closest(".wishlist-count-container")||e;s&&(s.style.display=t===0?"none":"")})):this.log("Invalid count received for UI update:",t)}showToast(t,e,s="info"){this.log("Queueing toast:",{title:t,message:e,type:s}),this.toastQueue.push({title:t,message:e,type:s}),this.processingToast||this.processToastQueue()}processToastQueue(){if(this.toastQueue.length===0){this.processingToast=!1,this.log("Toast queue empty.");return}this.processingToast=!0;const t=this.toastQueue.shift();this.log("Processing toast from queue:",t),this.displayToast(t.title,t.message,t.type).finally(()=>{setTimeout(()=>{this.processToastQueue()},300)})}displayToast(t,e,s){return new Promise(i=>{if(this.log("Attempting to display toast:",{title:t,type:s}),typeof window.showToast=="function"&&window.showToast!==this.showToast){this.log("Using global window.showToast function.");try{window.showToast(t,e,s)}catch(o){console.error("Error calling global showToast:",o),this.fallbackToast(t,e)}i()}else if(typeof window.Swal<"u"){this.log("Using SweetAlert2 for toast.");const o=s==="danger"?"error":s;window.Swal.fire({title:t,html:e,icon:o,toast:!0,position:"top-end",showConfirmButton:!1,timer:3500,timerProgressBar:!0,customClass:{popup:"custom-swal-toast"},showCloseButton:!0,didOpen:r=>{r.style.zIndex="9999",r.addEventListener("mouseenter",window.Swal.stopTimer),r.addEventListener("mouseleave",window.Swal.resumeTimer)}}).then(i,i)}else this.log("SweetAlert2 not available, using fallback alert."),this.fallbackToast(t,e),i()})}fallbackToast(t,e){const s=e.replace(/<[^>]*>/g,"");alert(`[${t}] ${s}`)}}function g(){document.readyState==="loading"?document.addEventListener("DOMContentLoaded",()=>{window.wishlistManager=new w}):window.wishlistManager=new w}g();
