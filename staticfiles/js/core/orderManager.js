/* empty css              */class d{constructor(){this.initEventListeners()}initEventListeners(){document.addEventListener("DOMContentLoaded",()=>{this.initQuickViewButtons(),this.initOrderTabs(),this.initOrderStatusForm()})}initQuickViewButtons(){document.querySelectorAll(".quick-view-btn").forEach(t=>{t.addEventListener("click",()=>{const n=t.dataset.orderId;this.loadOrderQuickView(n)})})}loadOrderQuickView(e){const t=document.getElementById("quickViewLoader"),n=document.getElementById("quickViewContent"),o=document.getElementById("quickViewError");if(t&&n&&o){t.classList.remove("d-none"),n.classList.add("d-none"),o.classList.add("d-none");const r=document.getElementById("viewFullOrderBtn");r&&r.dataset.urlTemplate&&(r.href=r.dataset.urlTemplate.replace("0",e));const i=document.getElementById("quickViewApiUrl");i&&i.value&&fetch(i.value.replace("0",e)).then(s=>{if(!s.ok)throw new Error("Network response was not ok");return s.json()}).then(s=>{this.populateQuickView(s),t.classList.add("d-none"),n.classList.remove("d-none")}).catch(s=>{console.error("Error fetching order data:",s),t.classList.add("d-none"),s.classList.remove("d-none")})}}populateQuickView(e){const t={orderNumber:document.getElementById("qv-order-number"),date:document.getElementById("qv-date"),status:document.getElementById("qv-status"),paymentStatus:document.getElementById("qv-payment-status"),customer:document.getElementById("qv-customer"),email:document.getElementById("qv-email"),total:document.getElementById("qv-total"),items:document.getElementById("qv-items")};t.orderNumber&&(t.orderNumber.textContent=e.order_number),t.date&&(t.date.textContent=e.date),t.status&&(t.status.textContent=e.status),t.paymentStatus&&(t.paymentStatus.textContent=e.payment_status),t.customer&&(t.customer.textContent=e.customer),t.email&&(t.email.textContent=e.email),t.total&&(t.total.textContent=`£${e.total.toFixed(2)}`),t.items&&(t.items.innerHTML="",e.items.forEach(n=>{const o=document.createElement("tr");o.innerHTML=`
                    <td>${n.product}</td>
                    <td class="text-center">${n.quantity}</td>
                    <td class="text-end">£${n.price.toFixed(2)}</td>
                    <td class="text-end">£${n.total.toFixed(2)}</td>
                `,t.items.appendChild(o)}))}initOrderTabs(){const e=document.getElementById("orderTabs");if(e){const t=window.location.hash;if(t){const n=e.querySelector(`button[data-bs-target="${t}"]`);n&&new bootstrap.Tab(n).show()}e.querySelectorAll('button[data-bs-toggle="tab"]').forEach(n=>{n.addEventListener("shown.bs.tab",o=>{window.location.hash=o.target.dataset.bsTarget})})}}initOrderStatusForm(){const e=document.querySelector('form[action*="order_update"]');e&&e.addEventListener("submit",t=>{const n=e.querySelector("#id_status");n&&n.value==="cancelled"&&(confirm("Are you sure you want to cancel this order? This action cannot be undone.")||t.preventDefault())})}}new d;
