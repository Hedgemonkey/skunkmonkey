/* empty css                       */import{A as l}from"./apiClient.js";import"./ajax_helper.77meLuHN.js";import"./vendor-common.B4uieipM.js";class d{constructor(){this.api=new l({errorHandler:this.handleApiError.bind(this)}),this.cartContainer=document.getElementById("cart-container"),this.cartTotal=document.getElementById("cart-total"),this.cartCount=document.getElementById("cart-count"),this.cartCountBadge=document.querySelector(".cart-count-badge"),this.initEventListeners()}initEventListeners(){document.querySelectorAll(".add-to-cart-form").forEach(t=>{t.addEventListener("submit",this.handleAddToCart.bind(this))}),document.querySelectorAll(".update-cart-form").forEach(t=>{t.addEventListener("submit",this.handleUpdateSubmit.bind(this))}),document.querySelectorAll(".remove-cart-item").forEach(t=>{t.addEventListener("click",this.handleRemoveItem.bind(this))}),this.initQuantityButtons(),this.initCartQuantityButtons()}initCartQuantityButtons(){const t=document.querySelectorAll(".quantity-decrease, .btn-decrease"),e=document.querySelectorAll(".quantity-increase, .btn-increase");t.forEach(o=>{o.addEventListener("click",a=>{console.log("Decrease button clicked");const n=o.closest(".update-cart-form");if(!n){console.error("Could not find parent form for decrease button:",o);return}const i=n.querySelector(".quantity-input"),r=parseInt(i.value);r>1&&(i.value=r-1,this.updateCartItemQuantity(n))})}),e.forEach(o=>{o.addEventListener("click",a=>{console.log("Increase button clicked");const n=o.closest(".update-cart-form");if(!n){console.error("Could not find parent form for increase button:",o);return}const i=n.querySelector(".quantity-input"),r=parseInt(i.value),c=parseInt(i.dataset.maxStock||Number.MAX_SAFE_INTEGER);r<c?(i.value=r+1,this.updateCartItemQuantity(n)):this.showNotification("Maximum Quantity",`Sorry, only ${c} units available.`,"info")})}),document.querySelectorAll(".quantity-input").forEach(o=>{o.addEventListener("change",a=>{console.log("Quantity input changed");const n=o.closest(".update-cart-form");if(!n){console.error("Could not find parent form for quantity input:",o);return}const i=parseInt(o.dataset.maxStock||Number.MAX_SAFE_INTEGER);let r=parseInt(o.value);isNaN(r)||r<1?(r=1,o.value=r):r>i&&(r=i,o.value=r,this.showNotification("Maximum Quantity",`Sorry, only ${i} units available.`,"info")),this.updateCartItemQuantity(n)})})}updateCartItemQuantity(t){if(!t||!t.action){console.error("Invalid form or form action:",t);return}const e=t.querySelector(".quantity-control");e&&e.classList.add("updating");const o=new FormData(t);console.log("Making AJAX request to:",t.action),this.api.post(t.action,o).then(a=>{if(console.log("AJAX response:",a),a.success){e&&e.classList.remove("updating");const i=t.closest("tr").querySelector(".item-subtotal");i&&(i.textContent=`$${a.item_subtotal}`,i.classList.add("highlight-update"),setTimeout(()=>{i.classList.remove("highlight-update")},1e3)),this.cartTotal&&(this.cartTotal.textContent=`$${a.cart_total}`,this.cartTotal.classList.add("highlight-update"),setTimeout(()=>{this.cartTotal.classList.remove("highlight-update")},1e3)),this.cartCountBadge&&(this.cartCountBadge.textContent=a.cart_count);const r=t.querySelector(".quantity-input");r&&a.item_quantity&&(r.value=a.item_quantity),this.showNotification("Cart Updated","Your cart has been updated successfully.","success",!0,{timer:2e3,timerProgressBar:!0,showConfirmButton:!1})}}).catch(a=>{console.error("Update cart error:",a),e&&e.classList.remove("updating"),this.handleApiError(a)})}initQuantityButtons(){const t=document.getElementById("quantity"),e=document.getElementById("decrease-quantity"),o=document.getElementById("increase-quantity");e&&o&&t&&(e.addEventListener("click",()=>{const a=parseInt(t.value);a>1&&(t.value=a-1)}),o.addEventListener("click",()=>{const a=parseInt(t.value),n=parseInt(t.getAttribute("max"));a<n?t.value=a+1:this.showNotification("Maximum Quantity",`Sorry, only ${n} units available.`,"info")}))}handleAddToCart(t){var r,c;t.preventDefault();const e=t.target,o=e.action,a=new FormData(e),n=((c=(r=e.closest(".product-info"))==null?void 0:r.querySelector("h1"))==null?void 0:c.textContent)||"Product",i=e.querySelector('button[type="submit"]');this.showNotification("Adding to Cart...","Please wait...","info",!1),this.api.post(o,a).then(s=>{s.success&&(i&&(i.classList.add("add-to-cart-animation"),setTimeout(()=>{i.classList.remove("add-to-cart-animation")},1500)),this.cartCount&&(this.cartCount.textContent=s.cart_count,this.cartCount.classList.add("cart-count-updated"),setTimeout(()=>{this.cartCount.classList.remove("cart-count-updated")},500)),this.cartCountBadge&&(this.cartCountBadge.textContent=s.cart_count,this.cartCountBadge.classList.remove("d-none")),this.showNotification("Added to Cart!",`${n} has been added to your cart.`,"success",!0,{showDenyButton:!0,denyButtonText:"View Cart",denyButtonColor:"#198754",confirmButtonText:"Continue Shopping"}).then(u=>{u.isDenied&&(window.location.href="/shop/cart/")}))})}handleUpdateSubmit(t){t.preventDefault();const e=t.target;if(!e||!e.action){console.error("Invalid form or form action in handleUpdateSubmit:",e);return}this.updateCartItemQuantity(e)}handleRemoveItem(t){t.preventDefault();const e=t.currentTarget,o=e.href,a=e.dataset.productName||"this item";this.showConfirmation("Remove Item?",`Are you sure you want to remove ${a} from your cart?`,()=>{this.api.get(o).then(n=>{if(n.success){const i=e.closest("tr");i.classList.add("fade-out"),setTimeout(()=>{i.remove(),this.cartTotal&&(this.cartTotal.textContent=`$${n.cart_total}`),this.cartCountBadge&&(n.cart_count>0?this.cartCountBadge.textContent=n.cart_count:this.cartCountBadge.classList.add("d-none")),n.cart_count===0&&window.location.reload()},300),this.showNotification("Item Removed",`${a} has been removed from your cart.`,"success")}})})}showConfirmation(t,e,o){typeof Swal<"u"?Swal.fire({title:t,text:e,icon:"question",showCancelButton:!0,confirmButtonColor:"#dc3545",cancelButtonColor:"#6c757d",confirmButtonText:"Yes, remove it",cancelButtonText:"No, keep it"}).then(a=>{a.isConfirmed&&o()}):confirm(e)&&o()}handleApiError(t){console.error("API Error:",t),this.showNotification("Error",t.message||"There was a problem with your request.","error")}showNotification(t,e,o,a=!0,n={}){return typeof Swal<"u"?Swal.fire({title:t,text:e,icon:o,confirmButtonColor:"#0d6efd",...n}):(alert(`${t}: ${e}`),Promise.resolve())}}document.addEventListener("DOMContentLoaded",function(){window.cartManager=new d});
