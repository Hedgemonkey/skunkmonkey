class s{constructor(){this.elements={fileInput:null,fileNameDisplay:null,previewContainer:null,previewImage:null,removeCheckbox:null,hiddenCheckbox:null,undoButton:null,toggleSelectionButton:null,actionButtonsContainer:null,imageSelectedFlag:null,croppedDataInput:null,currentImageContainer:null,noImageContainer:null,newImageContainer:null,currentImageIndicator:null,previewImageIndicator:null},this.state={newImageSelected:!1,hasNewImage:!1,hasExistingImage:!1,removeImage:!1,savedCroppedData:null},this.init()}init(){document.readyState==="loading"?document.addEventListener("DOMContentLoaded",()=>this.setupComponent()):this.setupComponent()}setupComponent(){this.cacheElements(),this.elementsExist()&&(this.initializeState(),this.bindEvents(),this.updateUIForInitialState(),this.setupVisibleCheckbox(),console.log("Profile Image Manager initialized"))}cacheElements(){this.elements.fileInput=document.getElementById("profile-image-file"),this.elements.fileNameDisplay=document.getElementById("file-name-display"),this.elements.previewContainer=document.getElementById("preview-container"),this.elements.previewImage=document.getElementById("preview-image"),this.elements.currentImageContainer=document.querySelector('[data-image-type="current"]'),this.elements.noImageContainer=document.querySelector('[data-image-type="none"]'),this.elements.newImageContainer=document.querySelector('[data-image-type="new"]'),this.elements.currentImageIndicator=document.getElementById("current-image-indicator"),this.elements.previewImageIndicator=document.getElementById("preview-image-indicator"),this.elements.removeCheckbox=document.getElementById("remove-image-checkbox"),this.elements.toggleSelectionButton=document.getElementById("toggle-selection-button"),this.elements.actionButtonsContainer=document.getElementById("image-action-buttons"),this.elements.imageSelectedFlag=document.getElementById("image-selected-flag"),this.elements.croppedDataInput=document.getElementById("cropped-image-data"),this.elements.hiddenCheckbox=document.querySelector('input[id$="-clear"]'),console.log("Profile Image Manager: Elements cached",{fileInput:!!this.elements.fileInput,fileNameDisplay:!!this.elements.fileNameDisplay,previewContainer:!!this.elements.previewContainer,removeCheckbox:!!this.elements.removeCheckbox,hiddenCheckbox:!!this.elements.hiddenCheckbox,toggleSelectionButton:!!this.elements.toggleSelectionButton,currentImageContainer:!!this.elements.currentImageContainer,noImageContainer:!!this.elements.noImageContainer})}elementsExist(){return this.elements.fileInput&&this.elements.fileNameDisplay}initializeState(){this.state.hasExistingImage=!!this.elements.currentImageContainer||!!this.elements.noImageContainer,this.state.hasNewImage=!1,this.state.newImageSelected=!1,this.state.removeImage=!1,this.state.savedCroppedData=null}updateUIForInitialState(){this.elements.currentImageContainer?this.elements.currentImageContainer.classList.add("selected"):this.elements.noImageContainer&&this.elements.noImageContainer.classList.add("selected")}bindEvents(){if(this.elements.fileInput.addEventListener("change",this.handleFileSelection.bind(this)),this.elements.undoButton&&this.elements.undoButton.addEventListener("click",this.handleUndo.bind(this)),this.elements.toggleSelectionButton&&this.elements.toggleSelectionButton.addEventListener("click",this.toggleSelection.bind(this)),this.elements.currentImageContainer){const e=this.elements.currentImageContainer.querySelector(".image-container");e&&e.addEventListener("click",()=>this.selectImage("current"))}if(this.elements.noImageContainer){const e=this.elements.noImageContainer.querySelector(".no-image-placeholder");e&&e.addEventListener("click",()=>this.selectImage("none"))}if(this.elements.newImageContainer){const e=this.elements.newImageContainer.querySelector(".image-container");e&&e.addEventListener("click",()=>this.selectImage("new"))}this.elements.removeCheckbox&&this.elements.removeCheckbox.addEventListener("change",this.handleRemoveCheckbox.bind(this))}setupVisibleCheckbox(){this.elements.removeCheckbox&&this.elements.hiddenCheckbox?(console.log("Setting up checkbox sync between:",this.elements.removeCheckbox,this.elements.hiddenCheckbox),this.elements.removeCheckbox.checked=this.elements.hiddenCheckbox.checked,this.elements.removeCheckbox.addEventListener("change",()=>{this.elements.hiddenCheckbox.checked=this.elements.removeCheckbox.checked,console.log("Checkbox synced. Hidden checkbox is now:",this.elements.hiddenCheckbox.checked),this.handleRemoveCheckbox({target:this.elements.removeCheckbox})})):console.warn("Cannot setup checkbox sync - elements not found:",{removeCheckbox:this.elements.removeCheckbox,hiddenCheckbox:this.elements.hiddenCheckbox})}handleFileSelection(e){const n=this.elements.fileInput.files;if(n&&n[0]){this.state.hasNewImage=!0;const t=n[0].name;if(this.elements.fileNameDisplay.textContent=t,!window.ImageCropper&&this.elements.previewImage&&this.elements.previewContainer&&this.showDirectPreview(n[0]),this.elements.actionButtonsContainer){this.elements.actionButtonsContainer.classList.remove("d-none");const i=document.getElementById("image-action-hint");i&&i.classList.remove("d-none")}this.elements.imageSelectedFlag&&(this.elements.imageSelectedFlag.value="pending"),this.selectImage("new"),this.uncheckRemoveCheckbox()}else this.elements.fileNameDisplay.textContent="No file selected"}showDirectPreview(e){const n=new FileReader;n.onload=t=>{this.elements.previewImage.src=t.target.result,this.elements.previewContainer.classList.remove("d-none")},n.readAsDataURL(e)}uncheckRemoveCheckbox(){this.elements.removeCheckbox&&this.elements.removeCheckbox.checked&&(this.elements.removeCheckbox.checked=!1,this.state.removeImage=!1)}handleUndo(e){e.preventDefault(),this.elements.fileInput.value="",this.elements.fileNameDisplay.textContent="No file selected",this.elements.previewContainer&&this.elements.previewContainer.classList.add("d-none"),this.elements.actionButtonsContainer&&this.elements.actionButtonsContainer.classList.add("d-none"),this.state.hasNewImage=!1,this.state.newImageSelected=!1,this.elements.currentImageContainer?this.selectImage("current"):this.elements.noImageContainer&&this.selectImage("none"),this.elements.imageSelectedFlag&&(this.elements.imageSelectedFlag.value="0"),this.elements.croppedDataInput&&(this.elements.croppedDataInput.value="",this.state.savedCroppedData=null)}toggleSelection(e){e&&e.preventDefault(),console.log("Toggle selection called. Current state:",this.state.newImageSelected?"new":"current"),this.state.hasNewImage?(this.state.newImageSelected=!this.state.newImageSelected,console.log("Toggle selection changed to:",this.state.newImageSelected?"new":"current"),this.updateSelectionUI(),this.updateImageSelectionFlag(),console.log("Image selection flag updated to:",this.elements.imageSelectedFlag.value)):console.log("Cannot toggle: No new image available")}selectImage(e){switch(console.log(`selectImage called with type: ${e}`),e){case"current":this.state.newImageSelected=!1,console.log("Selected current image, newImageSelected=false");break;case"none":this.state.newImageSelected=!1,console.log("Selected no image, newImageSelected=false");break;case"new":this.state.newImageSelected=!0,console.log("Selected new image, newImageSelected=true");break}this.updateSelectionUI(),this.updateImageSelectionFlag(),console.log("After updateImageSelectionFlag, flag value=",this.elements.imageSelectedFlag.value)}updateSelectionUI(e=null){const n=this.state.newImageSelected;this.elements.currentImageContainer&&this.elements.currentImageContainer.classList.toggle("selected",!n),this.elements.noImageContainer&&this.elements.noImageContainer.classList.toggle("selected",!n&&(!this.elements.currentImageContainer||e==="none")),this.elements.newImageContainer&&(this.elements.newImageContainer.classList.toggle("selected",n),this.elements.previewImageIndicator&&this.elements.previewImageIndicator.classList.toggle("d-none",!n))}updateImageSelectionFlag(){this.elements.imageSelectedFlag&&(this.elements.imageSelectedFlag.value=this.state.newImageSelected?"1":"0")}handleRemoveCheckbox(e){const n=e.target?e.target.checked:e;if(console.log("Remove checkbox changed:",n),this.state.removeImage=n,this.state.removeImage){if(this.elements.hiddenCheckbox&&(this.elements.hiddenCheckbox.checked=!0),this.elements.croppedDataInput&&this.elements.croppedDataInput.value&&(this.state.savedCroppedData=this.elements.croppedDataInput.value),this.elements.previewContainer&&this.elements.previewContainer.classList.add("d-none"),this.elements.actionButtonsContainer&&this.elements.actionButtonsContainer.classList.add("d-none"),this.elements.currentImageContainer){const t=this.elements.currentImageContainer.querySelector(".image-container");t&&(t.dataset.originalHtml||(t.dataset.originalHtml=t.innerHTML),t.innerHTML='<div class="no-image-placeholder"><i class="fas fa-user-slash fa-2x text-muted"></i></div>',t.classList.add("image-removal"))}}else{if(this.elements.hiddenCheckbox&&(this.elements.hiddenCheckbox.checked=!1),this.elements.currentImageContainer){const t=this.elements.currentImageContainer.querySelector(".image-container");t&&t.dataset.originalHtml&&(t.innerHTML=t.dataset.originalHtml,t.classList.remove("image-removal"))}this.state.hasNewImage&&(this.elements.previewContainer&&this.elements.previewContainer.classList.remove("d-none"),this.elements.actionButtonsContainer&&this.elements.actionButtonsContainer.classList.remove("d-none"),this.state.savedCroppedData&&this.elements.croppedDataInput&&(this.elements.croppedDataInput.value=this.state.savedCroppedData))}}updateWithCroppedImage(e,n){if(console.log("updateWithCroppedImage called"),e&&e.includes(";base64,")){const[t,i]=e.split(";base64,");e=`${t.split(";")[0]};base64,${i}`,console.log("Parameters removed from base64 data in ProfileImageManager")}if(e){const t=e.split(";base64,")[0];console.log(`Image format info after sanitization: ${t}`),console.log(`Contains charset? ${t.includes("charset=")}`)}this.state.hasNewImage=!0,this.state.newImagePreview=e,this.elements.croppedDataInput&&(this.elements.croppedDataInput.value=e,console.log("Updated cropped image data input with sanitized data")),this.selectImage("new"),this.elements.imageSelectedFlag&&(this.elements.imageSelectedFlag.value="1",console.log("Forced image_selected flag to 1")),this.updatePreviewUI(),console.log("Final state:",{hasNewImage:this.state.hasNewImage,newImageSelected:this.state.newImageSelected,imageSelectedFlag:this.elements.imageSelectedFlag?this.elements.imageSelectedFlag.value:"undefined"})}}const a=new s;window.profileImageManager=a;
