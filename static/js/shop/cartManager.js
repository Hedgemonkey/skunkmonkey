/* empty css                               */import{A as s}from"../common/apiClient.js";import"../chunks/ajax_helper.EulIYOr7.js";import"../chunks/chunks/vendor/common.Dz0GDR6V.js";class c{constructor(){this.api=new s({errorHandler:this.handleApiError.bind(this)}),this.cartContainer=document.getElementById("cart-container"),this.cartTotal=document.getElementById("cart-total"),this.cartCount=document.getElementById("cart-count"),this.cartCountBadge=document.querySelector(".cart-count-badge"),this.initEventListeners()}initEventListeners(){document.querySelectorAll('.add-to-cart-form[data-direct-submit="true"]').forEach(t=>{t.addEventListener("submit",this.handleAddToCart.bind(this))}),document.querySelectorAll(".update-cart-form").forEach(t=>{t.addEventListener("submit",this.handleUpdateSubmit.bind(this))}),document.querySelectorAll(".remove-cart-item").forEach(t=>{t.addEventListener("click",this.handleRemoveItem.bind(this))}),this.initQuantityButtons(),this.initCartQuantityButtons()}initCartQuantityButtons(){const t=document.querySelectorAll(".quantity-decrease, .btn-decrease"),o=document.querySelectorAll(".quantity-increase, .btn-increase");t.forEach(a=>{a.addEventListener("click",()=>{console.log("Decrease button clicked");const e=a.closest(".update-cart-form");if(!e){console.error("Could not find parent form for decrease button:",a);return}const n=e.querySelector(".quantity-input"),i=parseInt(n.value);i>1&&(n.value=i-1,this.updateCartItemQuantity(e))})}),o.forEach(a=>{a.addEventListener("click",()=>{console.log("Increase button clicked");const e=a.closest(".update-cart-form");if(!e){console.error("Could not find parent form for increase button:",a);return}const n=e.querySelector(".quantity-input"),i=parseInt(n.value),r=parseInt(n.dataset.maxStock||Number.MAX_SAFE_INTEGER);i<r?(n.value=i+1,this.updateCartItemQuantity(e)):this.showNotification("Maximum Quantity",`Sorry, only ${r} units available.`,"info")})}),document.querySelectorAll(".quantity-input").forEach(a=>{a.addEventListener("change",()=>{console.log("Quantity input changed");const e=a.closest(".update-cart-form");if(!e){console.error("Could not find parent form for quantity input:",a);return}const n=parseInt(a.dataset.maxStock||Number.MAX_SAFE_INTEGER);let i=parseInt(a.value);isNaN(i)||i<1?(i=1,a.value=i):i>n&&(i=n,a.value=i,this.showNotification("Maximum Quantity",`Sorry, only ${n} units available.`,"info")),this.updateCartItemQuantity(e)})})}updateCartItemQuantity(t){if(!t||!t.action){console.error("Invalid form or form action:",t);return}const o=t.querySelector(".quantity-control");o&&o.classList.add("updating");const a=new FormData(t);console.log("Making AJAX request to:",t.action),this.api.post(t.action,a).then(e=>{if(console.log("AJAX response:",e),e.success){o&&o.classList.remove("updating");const i=t.closest("tr").querySelector(".item-subtotal");i&&(i.textContent=`Â£${e.item_subtotal}`,i.classList.add("highlight-update"),setTimeout(()=>{i.classList.remove("highlight-update")},1e3)),this.cartTotal&&(this.cartTotal.textContent=`Â£${e.cart_total}`,this.cartTotal.classList.add("highlight-update"),setTimeout(()=>{this.cartTotal.classList.remove("highlight-update")},1e3)),this.cartCountBadge&&(this.cartCountBadge.textContent=e.item_count);const r=t.querySelector(".quantity-input");r&&e.item_quantity&&(r.value=e.item_quantity),this.showNotification("Cart Updated","Your cart has been updated successfully.","success",!0,{timer:2e3,timerProgressBar:!0,showConfirmButton:!1})}}).catch(e=>{console.error("Update cart error:",e),o&&o.classList.remove("updating"),this.handleApiError(e)})}initQuantityButtons(){const t=document.getElementById("quantity"),o=document.getElementById("decrease-quantity"),a=document.getElementById("increase-quantity");o&&a&&t&&(o.addEventListener("click",()=>{const e=parseInt(t.value);e>1&&(t.value=e-1)}),a.addEventListener("click",()=>{const e=parseInt(t.value),n=parseInt(t.getAttribute("max"));e<n?t.value=e+1:this.showNotification("Maximum Quantity",`Sorry, only ${n} units available.`,"info")}))}handleAddToCart(t){t.preventDefault();const o=t.target,a=o.action,e=new FormData(o),n=o.querySelector('button[type="submit"]');this.showNotification("Adding to Cart...","Please wait...","info",!1),this.api.post(a,e).then(i=>{i.success&&(n&&(n.classList.add("add-to-cart-animation"),setTimeout(()=>{n.classList.remove("add-to-cart-animation")},1500)),this.cartCount&&(this.cartCount.textContent=i.item_count,this.cartCount.classList.add("cart-count-updated"),setTimeout(()=>{this.cartCount.classList.remove("cart-count-updated")},500)),this.cartCountBadge&&(this.cartCountBadge.textContent=i.item_count,this.cartCountBadge.classList.remove("d-none")),this.showCartSummaryToast(i))})}showCartSummaryToast(t){let o="";t.cart_items&&t.cart_items.length>0&&(o=t.cart_items.map(a=>`<div class="d-flex justify-content-between align-items-center mb-1">
                    <span class="text-truncate me-2">${a.name} Ã— ${a.quantity}</span>
                    <span class="text-muted">Â£${a.total_price}</span>
                </div>`).join(""),t.total_unique_items>t.cart_items.length&&(o+=`<div class="text-muted small">... and ${t.total_unique_items-t.cart_items.length} more items</div>`)),this.showNotification("ðŸ›’ Added to Cart!",`<div class="text-start">
                <p class="mb-3"><strong>${t.quantity_added} Ã— ${t.product_name}</strong> added to your cart</p>
                <hr>
                <h6>Cart Summary (${t.item_count} items)</h6>
                <div class="mb-3">${o}</div>
                <div class="d-flex justify-content-between fw-bold">
                    <span>Total:</span>
                    <span>Â£${t.cart_total}</span>
                </div>
            </div>`,"success",!0,{showDenyButton:!0,denyButtonText:'<i class="fas fa-credit-card me-1"></i> Go to Checkout',denyButtonColor:"#198754",confirmButtonText:'<i class="fas fa-shopping-bag me-1"></i> Continue Shopping'}).then(a=>{a.isDenied&&(window.location.href="/shop/cart/")})}handleUpdateSubmit(t){t.preventDefault();const o=t.target;if(!o||!o.action){console.error("Invalid form or form action in handleUpdateSubmit:",o);return}this.updateCartItemQuantity(o)}handleRemoveItem(t){t.preventDefault();const o=t.currentTarget,a=o.href,e=o.dataset.productName||"this item";this.showConfirmation("Remove Item?",`Are you sure you want to remove ${e} from your cart?`,()=>{this.api.get(a).then(n=>{if(n.success){const i=o.closest("tr");i.classList.add("fade-out"),setTimeout(()=>{i.remove(),this.cartTotal&&(this.cartTotal.textContent=`Â£${n.cart_total}`),this.cartCountBadge&&(n.item_count>0?this.cartCountBadge.textContent=n.item_count:this.cartCountBadge.classList.add("d-none")),n.item_count===0&&window.location.reload()},300),this.showNotification("Item Removed",`${e} has been removed from your cart.`,"success")}})})}showConfirmation(t,o,a){typeof Swal<"u"?Swal.fire({title:t,text:o,icon:"question",showCancelButton:!0,confirmButtonColor:"#dc3545",cancelButtonColor:"#6c757d",confirmButtonText:"Yes, remove it",cancelButtonText:"No, keep it"}).then(e=>{e.isConfirmed&&a()}):confirm(o)&&a()}handleApiError(t){console.error("API Error:",t),this.showNotification("Error",t.message||"There was a problem with your request.","error")}showNotification(t,o,a,e={}){return typeof Swal<"u"?Swal.fire({title:t,text:o,icon:a,confirmButtonColor:"#0d6efd",...e}):(alert(`${t}: ${o}`),Promise.resolve())}}document.addEventListener("DOMContentLoaded",function(){window.cartManager=new c});
