{"version":3,"file":"shop_static_js_shop_wishlist-initializer_js.js","mappings":"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","sources":["webpack://skunkmonkey/./shop/static/js/shop/wishlist-initializer.js","webpack://skunkmonkey/./shop/static/js/shop/wishlist-manager.js"],"sourcesContent":["/**\n * Wishlist Initializer\n * Bootstraps the wishlist functionality when the page loads\n */\n\nimport wishlistManager from './wishlist-manager.js';\n\n/**\n * Initialize wishlist functionality\n */\nfunction initWishlist() {\n    // The wishlist manager is automatically initialized on import,\n    // but we can perform additional initialization here if needed\n    \n    // Check if we're on the wishlist page\n    const isWishlistPage = window.location.pathname.includes('/wishlist/');\n    \n    if (isWishlistPage) {\n        // Initialize special wishlist page functionality\n        initWishlistPage();\n    }\n    \n    console.log('[WishlistInitializer] Wishlist functionality initialized');\n}\n\n/**\n * Initialize wishlist page specific functionality\n */\nfunction initWishlistPage() {\n    // Add any wishlist page specific functionality here\n    console.log('[WishlistInitializer] Wishlist page specific functionality initialized');\n    \n    // Example: Add empty wishlist check\n    const wishlistItems = document.querySelectorAll('.wishlist-item, .product-card');\n    if (wishlistItems.length === 0) {\n        const container = document.querySelector('.container main, .wishlist-container');\n        if (container) {\n            container.innerHTML = `\n                <div class=\"empty-wishlist alert alert-info text-center my-5\">\n                    <i class=\"fas fa-heart-broken mb-3\" style=\"font-size: 3rem;\"></i>\n                    <h3>Your wishlist is empty</h3>\n                    <p class=\"mb-3\">You haven't added any products to your wishlist yet.</p>\n                    <a href=\"/shop/\" class=\"btn btn-primary\">\n                        <i class=\"fas fa-shopping-bag me-2\"></i>Browse Products\n                    </a>\n                </div>\n            `;\n        }\n    }\n}\n\n// Initialize when the DOM is fully loaded\ndocument.addEventListener('DOMContentLoaded', initWishlist);\n\n// Also export the init function to allow manual initialization\nexport { initWishlist };\n","/**\n * Wishlist Manager\n * Handles wishlist functionality for the shop\n */\n\nimport apiClient from '/static/js/api-client.js';\n\n/**\n * WishlistManager class for handling wishlist functionality\n */\nclass WishlistManager {\n    /**\n     * Initialize the WishlistManager\n     */\n    constructor() {\n        // Initialize properties BEFORE calling methods that use them\n        this.toastQueue = []; // Queue for storing toast notifications\n        this.processingToast = false; // Flag to track if a toast is currently being processed\n        this.debug = true; // Enable debug logging\n        this.wishlistItems = new Set(); // Store wishlist item IDs <-- Initialize this FIRST\n\n        this.initialize(); // Now call initialize, which uses this.wishlistItems\n    }\n\n    /**\n     * Initialize the wishlist manager with error handling\n     */\n    initialize() {\n        try {\n            // Initialize the wishlist items set from any data available\n            this.initializeWishlistItems();\n            this.initEventListeners();\n            this.checkSweetAlert2Availability();\n            \n            // Process any queued toasts once SweetAlert2 is available\n            document.addEventListener('swal2-initialized', () => {\n                this.log('SweetAlert2 initialized event received, processing queued toasts');\n                this.processToastQueue();\n            });\n        } catch (error) {\n            console.error('Error initializing Wishlist Manager:', error);\n        }\n    }\n\n    /**\n     * Initialize the wishlist items set from the DOM\n     */\n    initializeWishlistItems() {\n        // Try to get wishlist count from the DOM\n        const wishlistCountElements = document.querySelectorAll('.wishlist-count');\n        if (wishlistCountElements.length > 0) {\n            const count = parseInt(wishlistCountElements[0].textContent, 10);\n            this.log('Initial wishlist count:', count);\n        }\n\n        // Try to collect wishlist product IDs from data attributes or classes\n        document.querySelectorAll('.remove-wishlist-btn, .wishlist-btn.active').forEach(btn => {\n            const productId = btn.dataset.productId;\n            if (productId) {\n                this.wishlistItems.add(productId);\n                this.log('Added product to initial wishlist set:', productId);\n            }\n        });\n\n        // Look for wishlist product IDs in a data attribute on the body or a hidden input\n        const wishlistDataElement = document.getElementById('wishlist-data');\n        if (wishlistDataElement) {\n            try {\n                const wishlistData = JSON.parse(wishlistDataElement.value);\n                if (Array.isArray(wishlistData)) {\n                    wishlistData.forEach(id => this.wishlistItems.add(id.toString()));\n                    this.log('Initialized wishlist items from data element:', wishlistData);\n                }\n            } catch (e) {\n                console.error('Error parsing wishlist data:', e);\n            }\n        }\n\n        this.log('Initialized wishlist items:', [...this.wishlistItems]);\n    }\n\n    /**\n     * Log debug messages if debug mode is enabled\n     * @param {...any} args - Arguments to log\n     */\n    log(...args) {\n        if (this.debug) {\n            console.log('[WishlistManager]', ...args);\n        }\n    }\n\n    /**\n     * Check if SweetAlert2 is available and log the result\n     */\n    checkSweetAlert2Availability() {\n        if (typeof window.Swal !== 'undefined') {\n            this.log('SweetAlert2 is available for WishlistManager.');\n            // Dispatch an event to signal SweetAlert2 is available\n            document.dispatchEvent(new Event('swal2-initialized'));\n        } else {\n            console.warn('SweetAlert2 is not available for WishlistManager. Toast notifications will fall back to alerts.');\n            // Set up a listener to check again when main.js might have loaded SweetAlert2\n            window.addEventListener('load', () => {\n                setTimeout(() => {\n                    if (typeof window.Swal !== 'undefined') {\n                        this.log('SweetAlert2 became available after window load');\n                        document.dispatchEvent(new Event('swal2-initialized'));\n                    } else {\n                        // Try to load SweetAlert2 dynamically as a last resort\n                        this.loadSweetAlert2Dynamically();\n                    }\n                }, 500);\n            });\n        }\n    }\n\n    /**\n     * Try to load SweetAlert2 dynamically if it's not available\n     */\n    loadSweetAlert2Dynamically() {\n        if (typeof window.Swal === 'undefined') {\n            this.log('Attempting to load SweetAlert2 dynamically');\n            \n            const script = document.createElement('script');\n            script.src = 'https://cdn.jsdelivr.net/npm/sweetalert2@11';\n            script.onload = () => {\n                this.log('SweetAlert2 loaded dynamically');\n                document.dispatchEvent(new Event('swal2-initialized'));\n            };\n            script.onerror = (e) => {\n                console.error('Failed to load SweetAlert2 dynamically:', e);\n            };\n            document.head.appendChild(script);\n        }\n    }\n\n    /**\n     * Initialize event listeners for wishlist buttons\n     */\n    initEventListeners() {\n        // Use a single unified selector for all wishlist buttons\n        const wishlistBtnSelector = '.wishlist-btn, .add-to-wishlist-btn, .remove-wishlist-btn';\n        \n        // Handle existing buttons\n        document.querySelectorAll(wishlistBtnSelector).forEach(btn => {\n            if (!btn.hasAttribute('data-event-bound')) {\n                btn.setAttribute('data-event-bound', 'true');\n                btn.addEventListener('click', (e) => {\n                    e.preventDefault();\n                    this.handleWishlistToggle(e);\n                });\n            }\n        });\n\n        // Use delegation for future buttons\n        document.addEventListener('click', (event) => {\n            const toggleBtn = event.target.closest(wishlistBtnSelector);\n            if (toggleBtn && !toggleBtn.hasAttribute('data-event-bound')) {\n                // Check if this specific button already has a direct listener to avoid double handling\n                if (!toggleBtn.getAttribute('data-event-bound')) {\n                    toggleBtn.setAttribute('data-event-bound', 'true'); // Mark for delegation handling\n                     // Add the listener directly here as well, ensures it works even if mutation observer misses it\n                    toggleBtn.addEventListener('click', (e) => {\n                        e.preventDefault();\n                        this.handleWishlistToggle(e);\n                    });\n                    // Trigger the handler immediately for this click\n                    this.handleWishlistToggle(event);\n                    event.preventDefault();\n                }\n            }\n        });\n\n\n        // Add a mutation observer to handle dynamically added buttons\n        this.setupMutationObserver();\n\n        this.log('Wishlist event listeners initialized');\n    }\n\n    /**\n     * Setup mutation observer to watch for dynamically added buttons\n     */\n    setupMutationObserver() {\n        const wishlistBtnSelector = '.wishlist-btn:not([data-event-bound]), .add-to-wishlist-btn:not([data-event-bound]), .remove-wishlist-btn:not([data-event-bound])';\n        const observer = new MutationObserver((mutations) => {\n            mutations.forEach((mutation) => {\n                if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {\n                    mutation.addedNodes.forEach((node) => {\n                        if (node.nodeType === Node.ELEMENT_NODE) {\n                            // Check if the added node itself is a button\n                            if (node.matches(wishlistBtnSelector)) {\n                                this.bindWishlistButtonListener(node);\n                            }\n                            // Check for buttons within the added node\n                            const wishlistBtns = node.querySelectorAll(wishlistBtnSelector);\n                            wishlistBtns.forEach((btn) => {\n                                this.bindWishlistButtonListener(btn);\n                            });\n                        }\n                    });\n                }\n            });\n        });\n\n        observer.observe(document.body, {\n            childList: true,\n            subtree: true\n        });\n        this.log('Mutation observer set up for wishlist buttons.');\n    }\n\n     /**\n     * Binds the click listener to a wishlist button if not already bound.\n     * @param {HTMLElement} btn - The button element.\n     */\n    bindWishlistButtonListener(btn) {\n        if (!btn.hasAttribute('data-event-bound')) {\n            btn.setAttribute('data-event-bound', 'true');\n            btn.addEventListener('click', (e) => {\n                e.preventDefault();\n                this.handleWishlistToggle(e);\n            });\n            this.log('Bound listener to dynamically added button:', btn);\n        }\n    }\n\n    /**\n     * Handle toggling an item in the wishlist\n     * Handle toggling an item in the wishlist.\n     * REVISED: Stores original content, restores in finally.\n     * @param {Event} event - The click event\n     */\n    handleWishlistToggle(event) {\n        const button = event.currentTarget || event.target.closest('.wishlist-btn, .add-to-wishlist-btn, .remove-wishlist-btn');\n        if (!button) {\n            this.log('Wishlist toggle handler called but no button found.');\n            return;\n        }\n\n        // Prevent multiple rapid clicks\n        if (button.classList.contains('disabled')) {\n            this.log('Button already processing, ignoring click.');\n            return;\n        }\n\n        const productId = button.dataset.productId;\n        if (!productId) {\n            console.error(\"Wishlist button missing data-product-id:\", button);\n            this.showToast('Error', 'Product ID missing.', 'error');\n            return; // Stop if no product ID\n        }\n        const productName = button.dataset.productName || 'Product';\n        const isCurrentlyInWishlist = this.wishlistItems.has(productId);\n        this.log(`Toggling product ${productId}: Currently in Wishlist? ${isCurrentlyInWishlist}`);\n\n        // --- Store original content BEFORE showing spinner ---\n        const originalContent = button.innerHTML;\n        let originalDisabledState = button.disabled; // Store original disabled state\n\n        // Show spinner and disable\n        button.innerHTML = '<span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>';\n        button.disabled = true; // Use disabled attribute\n        button.classList.add('disabled'); // Keep class for styling\n\n        const url = `/shop/wishlist/toggle/${productId}/`;\n        this.log('POSTing to:', url);\n\n        apiClient.post(url, { product_id: productId })\n            .then(response => {\n                // ... (Keep the .then() logic for parsing, determining final state, updating Set, showing toast, removing item) ...\n                this.log('Raw response:', response);\n                let data;\n                try {\n                    if (typeof response === 'object' && response !== null) data = response;\n                    else if (typeof response === 'string' && response.trim() !== '') data = JSON.parse(response);\n                    else throw new Error('Invalid or empty response');\n                } catch (error) {\n                    console.error('Parse error:', error, 'Raw:', response);\n                    this.showToast('Error', 'Received invalid data.', 'error');\n                    // Return an object indicating error for finally block\n                    return { finalState: isCurrentlyInWishlist, errorOccurred: true };\n                }\n\n                let finalIsInWishlist = isCurrentlyInWishlist;\n                let actionSucceeded = false;\n                if (typeof data.success === 'boolean' && data.success) {\n                    actionSucceeded = true;\n                    // Determine final state based on server response\n                    if (data.isInWishlist !== undefined) {\n                        finalIsInWishlist = data.isInWishlist;\n                    } else if (data.added !== undefined) {\n                        finalIsInWishlist = data.added;\n                    } else if (data.removed !== undefined) {\n                        finalIsInWishlist = !data.removed;\n                    } else {\n                        // Fallback if server doesn't provide state (less ideal)\n                        finalIsInWishlist = !isCurrentlyInWishlist;\n                        this.log('Warning: Server response did not explicitly state added/removed/isInWishlist status. Inferring state.');\n                    }\n\n                    this.log('API Success. Final state:', finalIsInWishlist);\n                    // Update local set\n                    if (finalIsInWishlist) this.wishlistItems.add(productId);\n                    else this.wishlistItems.delete(productId);\n                    this.log('Updated local Set:', [...this.wishlistItems]);\n\n                    // Show toast\n                    const actionType = finalIsInWishlist ? 'Added to' : 'Removed from';\n                    this.showToast(`${actionType} Wishlist`, data.message || `${productName} ${actionType.toLowerCase()} wishlist.`, finalIsInWishlist ? 'success' : 'info');\n\n                    // Update global count if provided\n                    if (data.wishlist_count !== undefined) {\n                        this.updateWishlistCount(data.wishlist_count);\n                    }\n\n                    // Handle removal from wishlist page\n                    if (!finalIsInWishlist && window.location.pathname.includes('/wishlist/')) {\n                         this.removeItemFromWishlistPage(button);\n                    }\n                } else {\n                    actionSucceeded = false;\n                    this.log('API Failure:', data.message || data.error || 'Unknown error.');\n                    this.showToast('Error', data.message || data.error || 'Failed to update.', 'error');\n                }\n                // Return state for finally block\n                return { finalState: finalIsInWishlist, errorOccurred: !actionSucceeded };\n            })\n            .catch(error => {\n                // ... (Keep the .catch() logic for logging, showing error toast) ...\n                console.error('API Call Error:', error);\n                let errorMessage = 'Update failed. Check connection.';\n                 if (error && typeof error === 'object') {\n                     errorMessage = error.message || (error.response && error.response.data && (error.response.data.detail || error.response.data.error)) || errorMessage;\n                 } else if (typeof error === 'string') {\n                     errorMessage = error;\n                 }\n                this.showToast('Error', errorMessage, 'error');\n                // Return state for finally block\n                return { finalState: isCurrentlyInWishlist, errorOccurred: true };\n            })\n            .finally(() => { // Removed the result parameter as it's not reliably passed from catch/then in all scenarios\n                // --- RELIABLE SPINNER REMOVAL ---\n                // Always get the definitive state from the Set *inside* finally\n                const finalState = this.wishlistItems.has(productId);\n                this.log(`Finally block. Definitive final state from Set: ${finalState}. Restoring button ${productId}.`);\n\n                 const buttonsToRestore = document.querySelectorAll(`.wishlist-btn[data-product-id=\"${productId}\"], .add-to-wishlist-btn[data-product-id=\"${productId}\"], .remove-wishlist-btn[data-product-id=\"${productId}\"]`);\n\n                 buttonsToRestore.forEach(btn => {\n                    // 1. Restore original content if it's currently showing ONLY the spinner\n                    const spinner = btn.querySelector('span.spinner-border');\n                    if (spinner && btn.children.length === 1 && btn.firstChild === spinner) {\n                         btn.innerHTML = originalContent;\n                         this.log(`Restored original content for button:`, btn);\n                    } else {\n                         this.log(`Button content not just spinner, skipping content restore for:`, btn);\n                    }\n\n                    // 2. Remove disabled state/class\n                    btn.disabled = originalDisabledState; // Restore original disabled property\n                    btn.classList.remove('disabled', 'wishlist-btn-active'); // Remove active class too\n\n                    // 3. Update visual state (icon, classes) AFTER restoring content/enabled state\n                    this.updateWishlistButtonVisualState(btn, finalState); // Use definitive finalState from Set\n                 });\n\n                // Update global count based on final Set size\n                this.updateWishlistCount(this.wishlistItems.size);\n                this.log(`Finished processing toggle for product ${productId}.`);\n            });\n    }\n\n    /**\n     * Update all buttons for a specific product ID to reflect the current wishlist state.\n     * @param {string} productId - The product ID.\n     * @param {boolean} isInWishlist - The definitive state whether the product IS in the wishlist.\n     */\n    updateAllButtonsForProduct(productId, isInWishlist) {\n        if (!productId) return;\n        this.log(`Updating all buttons for product ${productId} to state: ${isInWishlist ? 'IN wishlist' : 'NOT in wishlist'}`);\n\n        const buttons = document.querySelectorAll(\n            `.wishlist-btn[data-product-id=\"${productId}\"], ` +\n            `.add-to-wishlist-btn[data-product-id=\"${productId}\"], ` +\n            `.remove-wishlist-btn[data-product-id=\"${productId}\"]`\n        );\n\n        if (buttons.length === 0) {\n             this.log(`No buttons found for product ${productId} to update.`);\n             return;\n        }\n\n        buttons.forEach(button => {\n             this.updateWishlistButtonVisualState(button, isInWishlist);\n             // Ensure button is enabled after update (might have been disabled during API call)\n             button.classList.remove('disabled', 'wishlist-btn-active');\n             // Restore original content if spinner was present (safer check)\n             const spinner = button.querySelector('.spinner-border');\n             if(spinner) {\n                // Need to know what the original content *should* be based on state\n                // Assuming simple icon or text change happens in updateWishlistButtonVisualState\n                // If original content varies wildly, this needs more complex state management\n             }\n        });\n    }\n\n    /**\n     * Updates the visual appearance (classes, icon, title, aria-label, href) of a single wishlist button.\n     * SIMPLIFIED: Only sets state based on isInWishlist, does NOT handle spinner removal or content restoration.\n     * @param {HTMLElement} button - The button element to update.\n     * @param {boolean} isInWishlist - Whether the product IS currently in the wishlist.\n     */\n    updateWishlistButtonVisualState(button, isInWishlist) {\n        if (!button) return;\n\n        const productName = button.dataset.productName || 'this product';\n        const productId = button.dataset.productId;\n        const icon = button.querySelector('i');\n\n        // --- Update Button Classes ---\n        if (isInWishlist) {\n            button.classList.remove('add-to-wishlist-btn');\n            button.classList.add('remove-wishlist-btn', 'active');\n        } else {\n            button.classList.remove('remove-wishlist-btn', 'active');\n            button.classList.add('add-to-wishlist-btn');\n        }\n\n        // --- Update Icon Classes ---\n        if (icon) {\n            // Ensure correct icon state based on isInWishlist\n            if (isInWishlist) {\n                // ** CHANGE: Set SOLID heart as the default for \"Remove\" state **\n                icon.classList.remove('far', 'fa-heart-broken', 'fa-heart-o'); // Remove others\n                icon.classList.add('fas', 'fa-heart');                     // Add SOLID heart\n            } else {\n                // For \"Add\" state: Use regular outline heart (FA5 Free)\n                icon.classList.remove('fas', 'fa-heart-broken', 'fa-heart', 'fa-heart-o'); // Remove others\n                icon.classList.add('far', 'fa-heart');                  // Add outline heart\n            }\n        }\n\n        // --- Update Title and Aria-label ---\n        if (isInWishlist) {\n            button.setAttribute('title', `Remove ${productName} from wishlist`);\n            button.setAttribute('aria-label', `Remove ${productName} from wishlist`);\n        } else {\n            button.setAttribute('title', `Add ${productName} to wishlist`);\n            button.setAttribute('aria-label', `Add ${productName} to wishlist`);\n        }\n\n        // --- Always update href ---\n        if (productId) {\n            button.setAttribute('href', `/shop/wishlist/toggle/${productId}/`);\n        }\n\n        // --- Mark state as set (for observer/debugging) ---\n        button.setAttribute('data-visual-state-set', isInWishlist ? 'in' : 'out');\n\n        // --- DO NOT handle spinner/disabled here - handled in finally block ---\n        // --- DO NOT handle innerHTML restoration here - handled in finally block ---\n    }\n\n    /**\n     * Remove an item visually from the wishlist page after successful removal via API.\n     * @param {HTMLElement} button - The 'remove' button that was clicked.\n     */\n    removeItemFromWishlistPage(button) {\n        const card = button.closest('.product-card, .wishlist-item');\n        if (!card) {\n            this.log('Could not find product card/item to remove from wishlist page.');\n            return;\n        }\n\n        // Find the most appropriate container to remove (e.g., the grid column or list item)\n        const container = card.closest('.col, .wishlist-item-container, li, div.product-entry'); // Add more selectors if needed\n        const elementToRemove = container || card; // Fallback to removing the card itself\n\n        this.log('Removing wishlist item element:', elementToRemove);\n\n        // Animate removal\n        elementToRemove.style.transition = 'opacity 0.5s ease, transform 0.5s ease, height 0.5s ease, margin 0.5s ease, padding 0.5s ease';\n        elementToRemove.style.opacity = '0';\n        elementToRemove.style.transform = 'scale(0.8)';\n        elementToRemove.style.height = '0'; // Collapse height\n        elementToRemove.style.marginTop = '0';\n        elementToRemove.style.marginBottom = '0';\n        elementToRemove.style.paddingTop = '0';\n        elementToRemove.style.paddingBottom = '0';\n        elementToRemove.style.borderWidth = '0'; // Collapse border\n\n\n        setTimeout(() => {\n            elementToRemove.remove();\n            this.log('Wishlist item removed from DOM.');\n\n            // Check if wishlist is now empty\n            const remainingItems = document.querySelectorAll('.product-card, .wishlist-item');\n            this.log('Remaining wishlist items on page:', remainingItems.length);\n            if (remainingItems.length === 0) {\n                this.displayEmptyWishlistMessage();\n            } else {\n                // Update count just in case it wasn't updated by API response\n                this.updateWishlistCount(remainingItems.length);\n            }\n        }, 500); // Match animation duration\n    }\n\n    /**\n     * Displays a message indicating the wishlist is empty.\n     */\n    displayEmptyWishlistMessage() {\n         this.log('Displaying empty wishlist message.');\n        const mainContent = document.querySelector('.container main, .wishlist-container, .content-section, #main-content'); // More robust selector\n        if (mainContent) {\n            // Clear existing content within the main area *carefully*\n            // Avoid wiping out headers/footers if they are inside the selected container\n             const wishlistGrid = mainContent.querySelector('.row.wishlist-items, #wishlist-items-container'); // Target specific container if possible\n             const containerToEmpty = wishlistGrid || mainContent;\n\n             containerToEmpty.innerHTML = `\n                <div class=\"empty-wishlist alert alert-info text-center my-5 col-12\">\n                    <i class=\"fas fa-heart-broken fa-3x mb-3\"></i>\n                    <h3 class=\"alert-heading\">Your Wishlist is Empty</h3>\n                    <p class=\"lead mb-4\">You haven't added any products yet. Start exploring!</p>\n                    <a href=\"/shop/\" class=\"btn btn-primary btn-lg\">\n                        <i class=\"fas fa-shopping-bag me-2\"></i>Browse Products\n                    </a>\n                </div>\n            `;\n            // Ensure count is zero\n            this.updateWishlistCount(0);\n        } else {\n             this.log('Could not find main content area to display empty wishlist message.');\n        }\n    }\n\n    /**\n     * Update the wishlist count in the UI\n     * @param {number} count - The new wishlist count\n     */\n    updateWishlistCount(count) {\n        if (count !== undefined && !isNaN(count)) {\n            this.log('Updating wishlist count UI elements to:', count);\n            document.querySelectorAll('.wishlist-count').forEach(element => {\n                element.textContent = count;\n                // Optional: Add animation or visual feedback on change\n                element.classList.add('animate__animated', 'animate__bounceIn');\n                element.onanimationend = () => element.classList.remove('animate__animated', 'animate__bounceIn');\n\n\n                // Hide/show container based on count\n                 const counterContainer = element.closest('.wishlist-count-container') || element; // Use element itself if no specific container\n                if (counterContainer) {\n                    counterContainer.style.display = count === 0 ? 'none' : ''; // Use style.display for better control\n                }\n            });\n        } else {\n             this.log('Invalid count received for UI update:', count);\n        }\n    }\n\n    /**\n     * Add a toast to the queue and process it\n     * @param {string} title - The notification title\n     * @param {string} message - The notification message (can be HTML).\n     * @param {string} type - Notification type ('success', 'error', 'warning', 'info', 'question').\n     */\n    showToast(title, message, type = 'info') {\n        this.log('Queueing toast:', { title, message, type });\n        this.toastQueue.push({ title, message, type });\n        if (!this.processingToast) {\n            this.processToastQueue();\n        }\n    }\n\n    /**\n     * Process the next toast notification in the queue.\n     */\n    processToastQueue() {\n        if (this.toastQueue.length === 0) {\n            this.processingToast = false;\n            this.log('Toast queue empty.');\n            return;\n        }\n\n        this.processingToast = true;\n        const toastToShow = this.toastQueue.shift();\n        this.log('Processing toast from queue:', toastToShow);\n\n        this.displayToast(toastToShow.title, toastToShow.message, toastToShow.type)\n            .finally(() => {\n                // Process next toast after a short delay to prevent rapid-fire toasts\n                setTimeout(() => {\n                    this.processToastQueue();\n                }, 300); // Adjust delay as needed\n            });\n    }\n\n    /**\n     * Display a toast notification using SweetAlert2 or fallback\n     * @param {string} title - The notification title\n     * @param {string} message - The notification message\n     * @param {string} message - The notification message (can be HTML).\n     * @param {string} type - Notification type ('success', 'error', 'warning', 'info', 'question').\n     * @returns {Promise} Resolves when the toast is displayed or fallback is shown.\n     */\n    displayToast(title, message, type) {\n        return new Promise((resolve) => {\n            this.log('Attempting to display toast:', { title, type });\n\n            // Use global showToast if specifically defined elsewhere (e.g., in main.js)\n            if (typeof window.showToast === 'function' && window.showToast !== this.showToast) { // Avoid recursion\n                this.log('Using global window.showToast function.');\n                try {\n                    window.showToast(title, message, type);\n                } catch (e) {\n                    console.error(\"Error calling global showToast:\", e);\n                    this.fallbackToast(title, message); // Fallback if global fails\n                }\n                resolve(); // Assume global function handles itself\n            }\n            // Use SweetAlert2 if available\n            else if (typeof window.Swal !== 'undefined') {\n                this.log('Using SweetAlert2 for toast.');\n                const iconType = type === 'danger' ? 'error' : type; // Map 'danger' to 'error' if needed\n\n                window.Swal.fire({\n                    title: title,\n                    html: message, // Allow HTML content\n                    icon: iconType,\n                    toast: true,\n                    position: 'top-end', // Common position for toasts\n                    showConfirmButton: false,\n                    timer: 3500, // Slightly longer timer\n                    timerProgressBar: true,\n                    customClass: {\n                        popup: 'custom-swal-toast', // Add custom class for styling\n                    },\n                    showCloseButton: true, // Allow users to close manually\n                    didOpen: (toast) => {\n                        toast.style.zIndex = '9999'; // Ensure visibility\n                        toast.addEventListener('mouseenter', window.Swal.stopTimer);\n                        toast.addEventListener('mouseleave', window.Swal.resumeTimer);\n                    }\n                }).then(resolve, resolve); // Resolve whether confirmed or timed out\n            }\n            // Fallback to standard alert\n            else {\n                this.log('SweetAlert2 not available, using fallback alert.');\n                this.fallbackToast(title, message);\n                resolve(); // Resolve after showing alert\n            }\n        });\n    }\n\n    /**\n     * Simple fallback alert mechanism.\n     */\n    fallbackToast(title, message) {\n         // Basic alert, strip HTML for safety if message might contain it\n         const cleanMessage = message.replace(/<[^>]*>/g, ''); // Basic HTML strip\n         alert(`[${title}] ${cleanMessage}`);\n    }\n\n}\n\n// --- Initialization ---\n// Ensure DOM is ready before initializing\nfunction initializeWishlistManager() {\n    if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', () => {\n            window.wishlistManager = new WishlistManager();\n        });\n    } else {\n        // DOM is already ready\n        window.wishlistManager = new WishlistManager();\n    }\n}\n\ninitializeWishlistManager();\n\n// Export the singleton instance *after* ensuring it's created\nexport default window.wishlistManager;\n"],"names":["wishlistManager","initWishlist","isWishlistPage","window","location","pathname","includes","initWishlistPage","console","log","wishlistItems","document","querySelectorAll","length","container","querySelector","innerHTML","addEventListener","apiClient","WishlistManager","_classCallCheck","toastQueue","processingToast","debug","Set","initialize","_createClass","key","value","_this","initializeWishlistItems","initEventListeners","checkSweetAlert2Availability","processToastQueue","error","_this2","wishlistCountElements","count","parseInt","textContent","forEach","btn","productId","dataset","add","wishlistDataElement","getElementById","wishlistData","JSON","parse","Array","isArray","id","toString","e","_toConsumableArray","_console","_len","arguments","args","_key","apply","concat","_this3","Swal","dispatchEvent","Event","warn","setTimeout","loadSweetAlert2Dynamically","_this4","script","createElement","src","onload","onerror","head","appendChild","_this5","wishlistBtnSelector","hasAttribute","setAttribute","preventDefault","handleWishlistToggle","event","toggleBtn","target","closest","getAttribute","setupMutationObserver","_this6","observer","MutationObserver","mutations","mutation","type","addedNodes","node","nodeType","Node","ELEMENT_NODE","matches","bindWishlistButtonListener","wishlistBtns","observe","body","childList","subtree","_this7","_this8","button","currentTarget","classList","contains","showToast","productName","isCurrentlyInWishlist","has","originalContent","originalDisabledState","disabled","url","post","product_id","then","response","data","_typeof","trim","Error","finalState","errorOccurred","finalIsInWishlist","actionSucceeded","success","isInWishlist","undefined","added","removed","actionType","message","toLowerCase","wishlist_count","updateWishlistCount","removeItemFromWishlistPage","errorMessage","detail","buttonsToRestore","spinner","children","firstChild","remove","updateWishlistButtonVisualState","size","updateAllButtonsForProduct","_this9","buttons","icon","_this10","card","elementToRemove","style","transition","opacity","transform","height","marginTop","marginBottom","paddingTop","paddingBottom","borderWidth","remainingItems","displayEmptyWishlistMessage","mainContent","wishlistGrid","containerToEmpty","isNaN","element","onanimationend","counterContainer","display","title","push","_this11","toastToShow","shift","displayToast","_this12","Promise","resolve","fallbackToast","iconType","fire","html","toast","position","showConfirmButton","timer","timerProgressBar","customClass","popup","showCloseButton","didOpen","zIndex","stopTimer","resumeTimer","cleanMessage","replace","alert","initializeWishlistManager","readyState"],"sourceRoot":""}