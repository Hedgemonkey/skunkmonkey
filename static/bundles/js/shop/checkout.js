/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./shop/static/js/shop/checkout.js":
/*!*****************************************!*\
  !*** ./shop/static/js/shop/checkout.js ***!
  \*****************************************/
/***/ (() => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n/**\n * Checkout form handling with Stripe integration\n * Handles secure payment processing\n */\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  console.log('DOM fully loaded - initializing checkout script');\n\n  // Get Stripe data from the DOM\n  var stripeDataElement = document.getElementById('stripe-data');\n\n  // Check if the Stripe data element exists\n  if (!stripeDataElement) {\n    console.error('Stripe data element not found');\n    var cardErrorsElement = document.getElementById('card-errors');\n    if (cardErrorsElement) {\n      cardErrorsElement.textContent = 'Payment system initialization error. Please refresh the page or contact support.';\n    }\n    return;\n  }\n  var stripePublishableKey = stripeDataElement.dataset.publishableKey;\n  var clientSecret = stripeDataElement.dataset.clientSecret;\n  var cacheCheckoutUrl = stripeDataElement.dataset.cacheUrl;\n\n  // Debug logging to verify data is available\n  console.log('Stripe publishable key:', stripePublishableKey);\n  console.log('Client secret available:', clientSecret);\n  console.log('Cache checkout URL:', cacheCheckoutUrl);\n\n  // Check if required data is present\n  if (!stripePublishableKey) {\n    console.error('Stripe publishable key is missing');\n    var _cardErrorsElement = document.getElementById('card-errors');\n    if (_cardErrorsElement) {\n      _cardErrorsElement.textContent = 'Payment system configuration error. Please contact support.';\n    }\n    var submitButtonElement = document.getElementById('submit-button');\n    if (submitButtonElement) {\n      submitButtonElement.disabled = true;\n    }\n    return;\n  }\n  if (!clientSecret) {\n    console.error('Client secret is missing');\n    var _cardErrorsElement2 = document.getElementById('card-errors');\n    if (_cardErrorsElement2) {\n      _cardErrorsElement2.textContent = 'Payment session could not be initialized. Please refresh the page or contact support.';\n    }\n    var _submitButtonElement = document.getElementById('submit-button');\n    if (_submitButtonElement) {\n      _submitButtonElement.disabled = true;\n    }\n    return;\n  }\n\n  // Verify we're using the test key in non-production environments\n  if (stripePublishableKey.startsWith('pk_test_')) {\n    console.log('Using Stripe TEST mode - no real payments will be processed');\n  } else if (stripePublishableKey.startsWith('pk_live_')) {\n    console.log('CAUTION: Using Stripe LIVE mode - real payments will be processed');\n  }\n\n  // Initialize Stripe\n  var stripe = Stripe(stripePublishableKey);\n  var elements = stripe.elements();\n\n  // Create and mount the card Element\n  var cardElement = elements.create('card', {\n    style: {\n      base: {\n        color: '#32325d',\n        fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\n        fontSmoothing: 'antialiased',\n        fontSize: '16px',\n        '::placeholder': {\n          color: '#aab7c4'\n        }\n      },\n      invalid: {\n        color: '#fa755a',\n        iconColor: '#fa755a'\n      }\n    }\n  });\n  cardElement.mount('#card-element');\n\n  // Handle validation errors on the card Element\n  cardElement.addEventListener('change', function (event) {\n    var displayError = document.getElementById('card-errors');\n    if (event.error) {\n      displayError.textContent = event.error.message;\n    } else {\n      displayError.textContent = '';\n    }\n  });\n\n  // Handle form submission\n  var form = document.getElementById('checkout-form');\n  var submitButton = document.getElementById('submit-button');\n  var loadingOverlay = document.getElementById('loading-overlay');\n  if (!form) {\n    console.error('Checkout form not found');\n    return;\n  }\n  if (!submitButton) {\n    console.error('Submit button not found');\n    return;\n  }\n\n  // Handle payment intent issues\n  function handlePaymentIntentIssue() {\n    var errorMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'The payment session has expired. Please refresh the page to continue.';\n    // Show error message\n    var cardErrorsElement = document.getElementById('card-errors');\n    if (cardErrorsElement) {\n      cardErrorsElement.textContent = errorMessage;\n    }\n\n    // Create a refresh button\n    var refreshButton = document.createElement('button');\n    refreshButton.className = 'btn btn-warning mt-3';\n    refreshButton.innerText = 'Refresh Page';\n    refreshButton.onclick = function () {\n      // Force a hard refresh of the page to get a new payment intent\n      window.location.href = window.location.href.split('?')[0] + '?refresh=' + new Date().getTime();\n    };\n\n    // Add the refresh button after the error message\n    if (cardErrorsElement && !document.getElementById('refresh-button')) {\n      refreshButton.id = 'refresh-button';\n      cardErrorsElement.parentNode.insertBefore(refreshButton, cardErrorsElement.nextSibling);\n    }\n\n    // Re-enable the submit button and hide overlay\n    if (submitButton) submitButton.disabled = false;\n    if (loadingOverlay) loadingOverlay.style.display = 'none';\n  }\n\n  // Helper function to get value from any field\n  function getFieldValue(fieldName) {\n    // Try with both regular name and id_ prefix (Django convention)\n    var field = form.elements[fieldName] || form.elements[\"id_\".concat(fieldName)] || document.getElementById(\"id_\".concat(fieldName));\n    return field ? field.value : '';\n  }\n  form.addEventListener('submit', /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(event) {\n      var termsCheckbox, _cardErrorsElement3, showError, _document$getElementB, csrfTokenElement, csrfToken, formData, response, responseData, billingSameAsShipping, billingDetails, _yield$stripe$confirm, paymentIntent, error;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            event.preventDefault();\n            console.log('Form submission started');\n\n            // Verify terms checkbox is checked\n            termsCheckbox = document.getElementById('terms-check');\n            if (!(!termsCheckbox || !termsCheckbox.checked)) {\n              _context.next = 7;\n              break;\n            }\n            _cardErrorsElement3 = document.getElementById('card-errors');\n            if (_cardErrorsElement3) {\n              _cardErrorsElement3.textContent = 'Please agree to the terms and conditions.';\n            }\n            return _context.abrupt(\"return\");\n          case 7:\n            // Disable the submit button to prevent double clicks\n            submitButton.disabled = true;\n\n            // Show the loading overlay\n            if (loadingOverlay) {\n              loadingOverlay.style.display = 'flex';\n            }\n\n            // Display error and stop processing\n            showError = function showError(message) {\n              console.error(message);\n              var cardErrorsElement = document.getElementById('card-errors');\n              if (cardErrorsElement) {\n                cardErrorsElement.textContent = message;\n              }\n              submitButton.disabled = false;\n              if (loadingOverlay) {\n                loadingOverlay.style.display = 'none';\n              }\n            }; // Confirm the card payment\n            _context.prev = 10;\n            // First cache the checkout data on the server\n            csrfTokenElement = form.querySelector('input[name=\"csrfmiddlewaretoken\"]');\n            if (csrfTokenElement) {\n              _context.next = 14;\n              break;\n            }\n            throw new Error('CSRF token not found in form');\n          case 14:\n            csrfToken = csrfTokenElement.value; // Get form data that we want to pass to the payment intent\n            formData = new FormData();\n            formData.append('client_secret', clientSecret);\n\n            // Add save_info from terms checkbox\n            formData.append('save_info', termsCheckbox.checked);\n            console.log('Sending data to cache_checkout_data...');\n            _context.prev = 19;\n            _context.next = 22;\n            return fetch(cacheCheckoutUrl, {\n              method: 'POST',\n              headers: {\n                'X-CSRFToken': csrfToken\n              },\n              body: formData\n            });\n          case 22:\n            response = _context.sent;\n            _context.prev = 23;\n            _context.next = 26;\n            return response.json();\n          case 26:\n            responseData = _context.sent;\n            _context.next = 33;\n            break;\n          case 29:\n            _context.prev = 29;\n            _context.t0 = _context[\"catch\"](23);\n            console.error('Failed to parse response JSON:', _context.t0);\n            responseData = {};\n          case 33:\n            if (!(response.status === 409 && responseData.error === 'payment_intent_unexpected_state')) {\n              _context.next = 37;\n              break;\n            }\n            console.error('Payment intent is in an unexpected state');\n            handlePaymentIntentIssue(responseData.message || 'The payment session has expired. Please refresh the page to continue.');\n            return _context.abrupt(\"return\");\n          case 37:\n            if (response.ok) {\n              _context.next = 41;\n              break;\n            }\n            // Handle server error\n            console.error('Server error:', responseData);\n            showError(responseData.error || 'An error occurred. Please try again.');\n            return _context.abrupt(\"return\");\n          case 41:\n            console.log('Cache checkout data successful');\n            _context.next = 49;\n            break;\n          case 44:\n            _context.prev = 44;\n            _context.t1 = _context[\"catch\"](19);\n            console.error('Error during fetch operation:', _context.t1);\n            showError('Network error. Please check your connection and try again.');\n            return _context.abrupt(\"return\");\n          case 49:\n            // Check if billing should be same as shipping\n            billingSameAsShipping = (_document$getElementB = document.getElementById('billing_same_as_shipping')) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.checked;\n            console.log('Billing same as shipping:', billingSameAsShipping);\n\n            // Prepare billing information using our helper function\n            billingDetails = {\n              name: getFieldValue('full_name'),\n              email: getFieldValue('email'),\n              phone: getFieldValue('phone_number'),\n              address: {\n                line1: getFieldValue(billingSameAsShipping ? 'shipping_address1' : 'billing_address1'),\n                line2: getFieldValue(billingSameAsShipping ? 'shipping_address2' : 'billing_address2'),\n                city: getFieldValue(billingSameAsShipping ? 'shipping_city' : 'billing_city'),\n                state: getFieldValue(billingSameAsShipping ? 'shipping_state' : 'billing_state'),\n                postal_code: getFieldValue(billingSameAsShipping ? 'shipping_zipcode' : 'billing_zipcode'),\n                country: getFieldValue(billingSameAsShipping ? 'shipping_country' : 'billing_country') || 'GB'\n              }\n            };\n            console.log('Proceeding with billing details:', billingDetails);\n\n            // Verify country is not empty before proceeding\n            if (billingDetails.address.country) {\n              _context.next = 56;\n              break;\n            }\n            showError('Country is required for payment processing. Please select a country and try again.');\n            return _context.abrupt(\"return\");\n          case 56:\n            _context.prev = 56;\n            _context.next = 59;\n            return stripe.confirmCardPayment(clientSecret, {\n              payment_method: {\n                card: cardElement,\n                billing_details: billingDetails\n              }\n            });\n          case 59:\n            _yield$stripe$confirm = _context.sent;\n            paymentIntent = _yield$stripe$confirm.paymentIntent;\n            error = _yield$stripe$confirm.error;\n            if (error) {\n              // Check for specific payment intent errors that indicate it's expired or invalid\n              if (error.type === 'invalid_request_error' && (error.code === 'payment_intent_unexpected_state' || error.message.includes('is not available') || error.message.includes('payment_intent'))) {\n                console.error('Payment intent issue:', error.message);\n                handlePaymentIntentIssue('The payment session has expired. Please refresh the page to continue.');\n              } else {\n                // Show other errors to customer\n                console.error('Payment confirmation error:', error);\n                showError(error.message);\n              }\n            } else {\n              if (paymentIntent.status === 'succeeded') {\n                console.log('Payment succeeded! Submitting form...');\n                // The payment was successful\n                // Submit the form to complete order processing\n                form.submit();\n              } else {\n                console.warn('Payment intent status not succeeded:', paymentIntent.status);\n                showError('Payment processing issue. Please try again.');\n              }\n            }\n            _context.next = 69;\n            break;\n          case 65:\n            _context.prev = 65;\n            _context.t2 = _context[\"catch\"](56);\n            console.error('Error in Stripe operation:', _context.t2);\n\n            // Check if this is a payment intent issue\n            if (_context.t2.type === 'invalid_request_error' && (_context.t2.code === 'payment_intent_unexpected_state' || _context.t2.message.includes('is not available') || _context.t2.message.includes('payment_intent'))) {\n              handlePaymentIntentIssue('The payment session has expired. Please refresh the page to continue.');\n            } else {\n              showError(_context.t2.message || 'An error occurred with the payment process. Please try again.');\n            }\n          case 69:\n            _context.next = 75;\n            break;\n          case 71:\n            _context.prev = 71;\n            _context.t3 = _context[\"catch\"](10);\n            console.error('Error in checkout process:', _context.t3);\n            // Show error to user\n            showError(_context.t3.message);\n          case 75:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[10, 71], [19, 44], [23, 29], [56, 65]]);\n    }));\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n\n  // Handle \"billing same as shipping\" checkbox if it exists\n  var billingSameAsShippingCheckbox = document.getElementById('billing_same_as_shipping');\n  var billingAddressFields = document.querySelector('.billing-address-fields');\n  if (billingSameAsShippingCheckbox && billingAddressFields) {\n    // Function to toggle visibility of billing fields\n    var toggleBillingFields = function toggleBillingFields() {\n      if (billingSameAsShippingCheckbox.checked) {\n        billingAddressFields.style.display = 'none';\n      } else {\n        billingAddressFields.style.display = 'block';\n      }\n    };\n\n    // Set initial state\n    toggleBillingFields();\n\n    // Listen for changes\n    billingSameAsShippingCheckbox.addEventListener('change', toggleBillingFields);\n  }\n  console.log('Checkout script initialization complete');\n});\n\n//# sourceURL=webpack://skunkmonkey/./shop/static/js/shop/checkout.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./shop/static/js/shop/checkout.js"]();
/******/ 	
/******/ })()
;