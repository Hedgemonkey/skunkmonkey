/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./shop/static/js/shop/checkout.js":
/*!*****************************************!*\
  !*** ./shop/static/js/shop/checkout.js ***!
  \*****************************************/
/***/ (() => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n/**\n * Checkout form handling with Stripe Payment Element integration\n * Features:\n * - Stripe Payment Element for comprehensive payment processing\n * - Billing information handled by Stripe Payment Element\n * - Auto-population of shipping fields\n * - Robust error handling\n */\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  console.log('DOM fully loaded - initializing checkout script with Payment Element');\n\n  // Get Stripe data from the DOM\n  var stripeDataElement = document.getElementById('stripe-data');\n\n  // Check if the Stripe data element exists\n  if (!stripeDataElement) {\n    console.error('Stripe data element not found');\n    showError('Payment system initialization error. Please refresh the page or contact support.');\n    return;\n  }\n  var stripePublishableKey = stripeDataElement.dataset.publishableKey;\n  var clientSecret = stripeDataElement.dataset.clientSecret;\n  var cacheCheckoutUrl = stripeDataElement.dataset.cacheUrl;\n\n  // Debug logging to verify data is available\n  console.log('Stripe publishable key:', stripePublishableKey ? 'Available' : 'Missing');\n  console.log('Client secret available:', !!clientSecret);\n  console.log('Cache checkout URL:', cacheCheckoutUrl);\n\n  // Store the client secret in sessionStorage with a timestamp\n  if (clientSecret) {\n    storeClientSecret(clientSecret);\n  } else {\n    // Check if we have a stored client secret that might be valid\n    var storedSecret = sessionStorage.getItem('client_secret');\n    if (storedSecret) {\n      console.log('Using stored client secret from session storage');\n    }\n  }\n\n  // Check for expired client secret\n  checkClientSecretExpiry();\n\n  // Check if required data is present\n  if (!stripePublishableKey) {\n    console.error('Stripe publishable key is missing');\n    showError('Payment system configuration error. Please contact support.');\n    disableSubmitButton();\n    return;\n  }\n  if (!clientSecret) {\n    console.error('Client secret is missing');\n    showError('Payment session could not be initialized. Please refresh the page or contact support.');\n    disableSubmitButton();\n    return;\n  }\n\n  // Initialize Stripe\n  var stripe = Stripe(stripePublishableKey);\n\n  // Initialize variables\n  var form = document.getElementById('checkout-form');\n  var submitButton = document.getElementById('submit-button');\n  var loadingOverlay = document.getElementById('loading-overlay');\n  var paymentElement = document.getElementById('payment-element');\n  var paymentErrorsElement = document.getElementById('payment-errors');\n  if (!form) {\n    console.error('Checkout form not found');\n    return;\n  }\n  if (!submitButton) {\n    console.error('Submit button not found');\n    return;\n  }\n  if (!paymentElement) {\n    console.error('Payment element container not found');\n    return;\n  }\n\n  // Create Stripe Elements instance\n  var options = {\n    clientSecret: clientSecret,\n    appearance: {\n      theme: 'stripe',\n      variables: {\n        colorPrimary: '#007bff',\n        colorBackground: '#ffffff',\n        colorText: '#32325d',\n        colorDanger: '#dc3545',\n        fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\n        spacingUnit: '4px',\n        borderRadius: '4px'\n      }\n    },\n    // Business name for the payment form\n    business: {\n      name: 'SkunkMonkey Shop'\n    }\n  };\n\n  // Create the Payment Element\n  var elements = stripe.elements(options);\n  var paymentElementInstance = elements.create('payment', {\n    layout: {\n      type: 'tabs',\n      defaultCollapsed: false\n    },\n    fields: {\n      billingDetails: {\n        address: {\n          country: 'auto'\n        }\n      }\n    },\n    terms: {\n      card: 'never'\n    },\n    // Don't show terms text in the Element\n    wallets: {\n      applePay: 'auto',\n      googlePay: 'auto'\n    }\n  });\n\n  // Mount the Payment Element\n  paymentElementInstance.mount('#payment-element');\n\n  /**\n   * Function to fix Stripe iframe styling issues\n   */\n  function fixStripeIframeStyles() {\n    // Find the Stripe iframe\n    var stripeIframe = document.querySelector('#payment-element iframe');\n    if (stripeIframe) {\n      console.log('Found Stripe iframe, applying style fixes');\n\n      // Create a style element to add to the head\n      var styleEl = document.createElement('style');\n      styleEl.textContent = \"\\n                #payment-element iframe {\\n                    margin: 0 !important;\\n                    width: 100% !important;\\n                    max-width: 100% !important;\\n                    min-width: 100% !important;\\n                    transform: none !important;\\n                    position: static !important;\\n                }\\n                #payment-element .__PrivateStripeElement {\\n                    margin: 0 !important;\\n                    position: relative !important;\\n                    transform: none !important;\\n                }\\n                .payment-element-container {\\n                    position: relative !important;\\n                    z-index: 1 !important;\\n                    overflow: visible !important;\\n                    min-height: 350px !important;\\n                }\\n            \";\n      document.head.appendChild(styleEl);\n      console.log('Added Stripe iframe style fixes');\n    } else {\n      console.log('Stripe iframe not found yet, will retry');\n    }\n  }\n\n  // Apply fix for Stripe iframe styling immediately and after delays\n  fixStripeIframeStyles();\n  setTimeout(fixStripeIframeStyles, 500);\n  setTimeout(fixStripeIframeStyles, 1000);\n\n  // Listen for changes to the Payment Element to handle validation errors and adjust sizing\n  paymentElementInstance.on('change', function (event) {\n    if (event.error) {\n      showError(event.error.message);\n    } else {\n      clearError();\n    }\n\n    // Adjust container height if needed\n    adjustContainerHeight();\n    enhanceContainerHeightAdjustment();\n  });\n\n  // Also listen for the ready event to adjust the container height and fix styles\n  paymentElementInstance.on('ready', function () {\n    console.log('Payment element is ready and fully rendered');\n    // Allow a brief delay for the iframe to fully render\n    setTimeout(adjustContainerHeight, 100);\n    // Fix Stripe iframe styles\n    fixStripeIframeStyles();\n    setTimeout(fixStripeIframeStyles, 100);\n    // Apply enhanced height adjustment\n    enhanceContainerHeightAdjustment();\n    setupExpansionDetection();\n  });\n\n  // Keep track of form submission status\n  var isSubmitting = false;\n\n  /**\n   * Store client secret in sessionStorage with a timestamp\n   * @param {string} clientSecret - The Stripe client secret\n   */\n  function storeClientSecret(clientSecret) {\n    // Store the client secret and a timestamp\n    var now = new Date().getTime();\n    sessionStorage.setItem('client_secret', clientSecret);\n    sessionStorage.setItem('client_secret_timestamp', now);\n\n    // Store the cart total as an additional verification\n    var cartTotalElement = document.querySelector('.checkout-total') || document.querySelector('.cart-total') || document.getElementById('cart-total');\n    if (cartTotalElement) {\n      sessionStorage.setItem('cart_total', cartTotalElement.textContent.trim());\n    }\n  }\n\n  /**\n   * Clear client secret data from sessionStorage\n   */\n  function clearClientSecretData() {\n    sessionStorage.removeItem('client_secret');\n    sessionStorage.removeItem('client_secret_timestamp');\n    sessionStorage.removeItem('cart_total');\n  }\n\n  /**\n   * Check if the stored client secret is expired\n   */\n  function checkClientSecretExpiry() {\n    var storedSecret = sessionStorage.getItem('client_secret');\n    var timestamp = sessionStorage.getItem('client_secret_timestamp');\n    if (storedSecret && timestamp) {\n      var now = new Date().getTime();\n      var timeDiff = now - parseInt(timestamp);\n\n      // If more than 1 hour old, consider it expired (60 * 60 * 1000 = 3600000 ms)\n      if (timeDiff > 3600000) {\n        console.log('Client secret expired, clearing data');\n        clearClientSecretData();\n\n        // Show a message if we're on the checkout page\n        if (window.location.href.includes('checkout')) {\n          handlePaymentIntentIssue('Your payment session has expired. Please refresh the page to continue.');\n        }\n      }\n    }\n  }\n\n  /**\n   * Disable the submit button\n   */\n  function disableSubmitButton() {\n    if (submitButton) {\n      submitButton.disabled = true;\n    }\n  }\n\n  /**\n   * Show an error message\n   * @param {string} message - The error message to display\n   */\n  function showError(message) {\n    if (paymentErrorsElement) {\n      paymentErrorsElement.textContent = message;\n      paymentErrorsElement.classList.remove('d-none');\n    }\n  }\n\n  /**\n   * Clear error messages\n   */\n  function clearError() {\n    if (paymentErrorsElement) {\n      paymentErrorsElement.textContent = '';\n      paymentErrorsElement.classList.add('d-none');\n    }\n  }\n\n  /**\n   * Helper function to adjust the container height based on the iframe content\n   */\n  function adjustContainerHeight() {\n    var iframeElement = document.querySelector('#payment-element iframe');\n    var containerElement = document.querySelector('.payment-element-container');\n    if (iframeElement && containerElement) {\n      var iframeHeight = iframeElement.scrollHeight || iframeElement.offsetHeight;\n\n      // Add some padding to ensure it fits well\n      var newHeight = iframeHeight + 50;\n\n      // Only update if the new height is larger than the minimum\n      if (newHeight > 300) {\n        containerElement.style.minHeight = \"\".concat(newHeight, \"px\");\n      }\n      console.log('Adjusted payment element container height to:', newHeight + 'px');\n    }\n  }\n\n  /**\n   * Enhanced function to adjust heights of all containers based on iframe content\n   */\n  function enhanceContainerHeightAdjustment() {\n    // Find all the relevant elements\n    var iframeElement = document.querySelector('#payment-element iframe');\n    var containerElement = document.querySelector('.payment-element-container');\n    var wrapperElement = document.querySelector('.stripe-element-wrapper');\n    var paymentElement = document.getElementById('payment-element');\n    var privateElement = document.querySelector('#payment-element .__PrivateStripeElement');\n    if (!iframeElement) return;\n\n    // Function to check and update heights\n    function updateHeights() {\n      // Get actual height of iframe (try multiple methods)\n      var iframeHeight = iframeElement.scrollHeight || iframeElement.offsetHeight || iframeElement.clientHeight || parseInt(iframeElement.style.height, 10) || 280; // Fallback\n\n      // Only proceed if we got a reasonable height\n      if (iframeHeight > 100) {\n        console.log('Propagating iframe height:', iframeHeight);\n\n        // Set explicit height on elements to ensure expansion\n        if (privateElement) privateElement.style.height = iframeHeight + 5 + 'px';\n        if (paymentElement) paymentElement.style.height = iframeHeight + 25 + 'px';\n        if (wrapperElement) wrapperElement.style.height = iframeHeight + 35 + 'px';\n        if (containerElement) containerElement.style.height = iframeHeight + 50 + 'px';\n      }\n    }\n\n    // Call immediately\n    updateHeights();\n\n    // Set up mutation observer to detect iframe height changes\n    var observer = new MutationObserver(function (mutations) {\n      updateHeights();\n    });\n\n    // Start observing iframe for style changes that could affect height\n    observer.observe(iframeElement, {\n      attributes: true,\n      attributeFilter: ['style', 'height', 'class']\n    });\n\n    // Also check periodically (as a fallback)\n    var heightInterval = setInterval(updateHeights, 1000);\n\n    // Stop checking after 60 seconds (when most interactions should be complete)\n    setTimeout(function () {\n      return clearInterval(heightInterval);\n    }, 60000);\n    console.log('Enhanced container height adjustment enabled');\n  }\n\n  /**\n   * Sets up expansion detection for Stripe iframe\n   */\n  function setupExpansionDetection() {\n    // Check for expansion periodically (fallback approach)\n    var expansionChecker = setInterval(function () {\n      var iframe = document.querySelector('#payment-element iframe');\n      if (!iframe) {\n        clearInterval(expansionChecker);\n        return;\n      }\n\n      // Store current height to check for changes\n      var currentHeight = iframe.style.height || iframe.offsetHeight;\n\n      // Check again after a short delay\n      setTimeout(function () {\n        var newHeight = iframe.style.height || iframe.offsetHeight;\n        if (newHeight !== currentHeight) {\n          console.log('Iframe height changed from', currentHeight, 'to', newHeight);\n          adjustContainerHeight();\n          enhanceContainerHeightAdjustment();\n        }\n      }, 50);\n    }, 500); // Check every 500ms\n\n    // Clean up after 1 minute (when most interactions should be complete)\n    setTimeout(function () {\n      clearInterval(expansionChecker);\n    }, 60000);\n\n    // Add click listeners to detect user interaction with payment element\n    var paymentElement = document.getElementById('payment-element');\n    if (paymentElement) {\n      paymentElement.addEventListener('click', function () {\n        // Check height after interaction\n        setTimeout(function () {\n          adjustContainerHeight();\n          enhanceContainerHeightAdjustment();\n        }, 300);\n      });\n\n      // Also listen for focus events which might trigger expansions\n      paymentElement.addEventListener('focusin', function () {\n        setTimeout(function () {\n          adjustContainerHeight();\n          enhanceContainerHeightAdjustment();\n        }, 300);\n      });\n    }\n    console.log('Expansion detection set up');\n  }\n\n  /**\n   * Enhance container height adjustment to capture and propagate iframe height changes\n   * This function should be called after adjustContainerHeight\n   */\n  function enhanceContainerHeightAdjustment() {\n    // Find all the relevant elements\n    var iframeElement = document.querySelector('#payment-element iframe');\n    var containerElement = document.querySelector('.payment-element-container');\n    var wrapperElement = document.querySelector('.stripe-element-wrapper');\n    var paymentElement = document.getElementById('payment-element');\n    var privateElement = document.querySelector('#payment-element .__PrivateStripeElement');\n    if (!iframeElement) return;\n\n    // Function to check and update heights\n    function updateHeights() {\n      // Get actual height of iframe (try multiple methods)\n      var iframeHeight = iframeElement.scrollHeight || iframeElement.offsetHeight || iframeElement.clientHeight || parseInt(iframeElement.style.height, 10) || 280; // Fallback\n\n      // Only proceed if we got a reasonable height\n      if (iframeHeight > 100) {\n        console.log('Propagating iframe height:', iframeHeight);\n\n        // Set explicit height on elements to ensure expansion\n        if (privateElement) privateElement.style.height = iframeHeight + 5 + 'px';\n        if (paymentElement) paymentElement.style.height = iframeHeight + 25 + 'px';\n        if (wrapperElement) wrapperElement.style.height = iframeHeight + 35 + 'px';\n        if (containerElement) containerElement.style.height = iframeHeight + 50 + 'px';\n      }\n    }\n\n    // Call immediately\n    updateHeights();\n\n    // Set up mutation observer to detect iframe height changes\n    var observer = new MutationObserver(function (mutations) {\n      updateHeights();\n    });\n\n    // Start observing iframe for style changes that could affect height\n    observer.observe(iframeElement, {\n      attributes: true,\n      attributeFilter: ['style', 'height', 'class']\n    });\n\n    // Also check periodically (as a fallback)\n    var heightInterval = setInterval(updateHeights, 1000);\n\n    // Stop checking after 60 seconds (when most interactions should be complete)\n    setTimeout(function () {\n      return clearInterval(heightInterval);\n    }, 60000);\n    console.log('Enhanced container height adjustment enabled');\n  }\n\n  /**\n   * Handle payment intent issues by showing error and refresh button\n   * @param {string} errorMessage - The error message to display\n   */\n  function handlePaymentIntentIssue() {\n    var errorMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'The payment session has expired. Please refresh the page to continue.';\n    // Show error message\n    showError(errorMessage);\n\n    // Create a refresh button\n    var refreshButton = document.createElement('button');\n    refreshButton.className = 'btn btn-warning mt-3';\n    refreshButton.innerText = 'Refresh Page';\n    refreshButton.onclick = function () {\n      // Clear any stored client secret data\n      clearClientSecretData();\n\n      // Force a hard refresh of the page to get a new payment intent\n      window.location.href = window.location.href.split('?')[0] + '?refresh=' + new Date().getTime();\n    };\n\n    // Add the refresh button after the error message\n    if (paymentErrorsElement && !document.getElementById('refresh-button')) {\n      refreshButton.id = 'refresh-button';\n      paymentErrorsElement.parentNode.insertBefore(refreshButton, paymentErrorsElement.nextSibling);\n    }\n\n    // Reset submission status\n    isSubmitting = false;\n\n    // Re-enable the submit button and hide overlay\n    if (submitButton) submitButton.disabled = false;\n    if (loadingOverlay) loadingOverlay.style.display = 'none';\n  }\n\n  /**\n   * Helper function to get value from any field\n   * @param {string} fieldName - The name of the field\n   * @returns {string} The field value\n   */\n  function getFieldValue(fieldName) {\n    // Try with both regular name and id_ prefix (Django convention)\n    var field = form.elements[fieldName] || form.elements[\"id_\".concat(fieldName)] || document.getElementById(\"id_\".concat(fieldName));\n    return field ? field.value : '';\n  }\n\n  /**\n   * Verify cart total matches stored value\n   */\n  function verifyCartTotal() {\n    var storedTotal = sessionStorage.getItem('cart_total');\n    var currentTotalElement = document.querySelector('.checkout-total') || document.querySelector('.cart-total') || document.getElementById('cart-total');\n    if (storedTotal && currentTotalElement) {\n      var currentTotal = currentTotalElement.textContent.trim();\n\n      // If cart total has changed, clear the client secret\n      if (storedTotal !== currentTotal) {\n        console.log('Cart total changed, clearing client secret data');\n        clearClientSecretData();\n      }\n    }\n  }\n\n  // Handle form submission\n  form.addEventListener('submit', /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(event) {\n      var termsCheckbox, buttonText, spinner, _document$getElementB, csrfTokenElement, csrfToken, formData, response, responseData, returnUrl, baseUrl, formAction, currentPath, currentDir, shipping, _yield$stripe$confirm, error, paymentIntentIdField, paymentMethodTypeField;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            event.preventDefault();\n            console.log('Form submission started');\n\n            // Prevent multiple submissions\n            if (!isSubmitting) {\n              _context.next = 5;\n              break;\n            }\n            console.log('Form already submitting, preventing duplicate submission');\n            return _context.abrupt(\"return\");\n          case 5:\n            // Verify terms checkbox is checked\n            termsCheckbox = document.getElementById('terms-check');\n            if (!(!termsCheckbox || !termsCheckbox.checked)) {\n              _context.next = 9;\n              break;\n            }\n            showError('Please agree to the terms and conditions.');\n            return _context.abrupt(\"return\");\n          case 9:\n            // Set submission status\n            isSubmitting = true;\n\n            // Disable the submit button to prevent double clicks\n            submitButton.disabled = true;\n\n            // Show loading indicator in button\n            buttonText = document.getElementById('button-text');\n            spinner = document.getElementById('spinner');\n            if (buttonText) buttonText.classList.add('d-none');\n            if (spinner) spinner.classList.remove('d-none');\n\n            // Show the loading overlay\n            if (loadingOverlay) {\n              loadingOverlay.style.display = 'flex';\n            }\n            _context.prev = 16;\n            // First cache the checkout data on the server\n            csrfTokenElement = form.querySelector('input[name=\"csrfmiddlewaretoken\"]');\n            if (csrfTokenElement) {\n              _context.next = 20;\n              break;\n            }\n            throw new Error('CSRF token not found in form');\n          case 20:\n            csrfToken = csrfTokenElement.value; // Get form data that we want to pass to the payment intent\n            formData = new FormData();\n            formData.append('client_secret', clientSecret);\n            formData.append('save_info', ((_document$getElementB = document.getElementById('id_save_payment_info')) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.checked) || false);\n            console.log('Sending data to cache_checkout_data...');\n            _context.prev = 25;\n            _context.next = 28;\n            return fetch(cacheCheckoutUrl, {\n              method: 'POST',\n              headers: {\n                'X-CSRFToken': csrfToken\n              },\n              body: formData\n            });\n          case 28:\n            response = _context.sent;\n            _context.prev = 29;\n            _context.next = 32;\n            return response.json();\n          case 32:\n            responseData = _context.sent;\n            _context.next = 39;\n            break;\n          case 35:\n            _context.prev = 35;\n            _context.t0 = _context[\"catch\"](29);\n            console.error('Failed to parse response JSON:', _context.t0);\n            responseData = {};\n          case 39:\n            if (!(response.status === 409 && responseData.error === 'payment_intent_unexpected_state')) {\n              _context.next = 43;\n              break;\n            }\n            console.error('Payment intent is in an unexpected state');\n            handlePaymentIntentIssue(responseData.message || 'The payment session has expired. Please refresh the page to continue.');\n            return _context.abrupt(\"return\");\n          case 43:\n            if (response.ok) {\n              _context.next = 52;\n              break;\n            }\n            // Handle server error\n            console.error('Server error:', responseData);\n            showError(responseData.error || 'An error occurred. Please try again.');\n            isSubmitting = false;\n            submitButton.disabled = false;\n            if (buttonText) buttonText.classList.remove('d-none');\n            if (spinner) spinner.classList.add('d-none');\n            if (loadingOverlay) loadingOverlay.style.display = 'none';\n            return _context.abrupt(\"return\");\n          case 52:\n            console.log('Cache checkout data successful');\n            _context.next = 65;\n            break;\n          case 55:\n            _context.prev = 55;\n            _context.t1 = _context[\"catch\"](25);\n            console.error('Error during fetch operation:', _context.t1);\n            showError('Network error. Please check your connection and try again.');\n            isSubmitting = false;\n            submitButton.disabled = false;\n            if (buttonText) buttonText.classList.remove('d-none');\n            if (spinner) spinner.classList.add('d-none');\n            if (loadingOverlay) loadingOverlay.style.display = 'none';\n            return _context.abrupt(\"return\");\n          case 65:\n            _context.prev = 65;\n            // Get the base URL\n            baseUrl = window.location.origin; // Make sure origin ends with a trailing slash if needed\n            if (!baseUrl.endsWith('/')) {\n              baseUrl += '/';\n            }\n\n            // Get the form action URL\n            formAction = form.action; // If form.action is a relative URL, construct a proper absolute URL\n            if (formAction.startsWith('/') || !formAction.includes('://')) {\n              // If it starts with /, it's already relative to origin\n              if (formAction.startsWith('/')) {\n                returnUrl = baseUrl + formAction.substring(1).replace('checkout', 'checkout/success');\n              } else {\n                // Otherwise it's relative to current path\n                currentPath = window.location.pathname;\n                currentDir = currentPath.substring(0, currentPath.lastIndexOf('/') + 1);\n                returnUrl = baseUrl + currentDir + formAction.replace('checkout', 'checkout/success');\n              }\n            } else {\n              // It's already an absolute URL\n              returnUrl = formAction.replace('checkout', 'checkout/success');\n            }\n\n            // Ensure we don't have double slashes in the URL (except after protocol)\n            returnUrl = returnUrl.replace(/([^:])\\/\\//g, '$1/');\n\n            // Log the constructed URL for debugging\n            console.log('Success return URL:', returnUrl);\n\n            // Ensure the return URL is a valid absolute URL\n            if (returnUrl.startsWith('http')) {\n              _context.next = 74;\n              break;\n            }\n            throw new Error('Return URL is not absolute: ' + returnUrl);\n          case 74:\n            // Additional validation: make sure it doesn't end with two slashes\n            if (returnUrl.endsWith('//')) {\n              returnUrl = returnUrl.slice(0, -1);\n            }\n            _context.next = 82;\n            break;\n          case 77:\n            _context.prev = 77;\n            _context.t2 = _context[\"catch\"](65);\n            // Fallback to a simple, reliable approach if there's any error\n            console.error('Error constructing return URL:', _context.t2);\n            returnUrl = window.location.origin + '/shop/checkout/success/';\n            console.log('Using fallback return URL:', returnUrl);\n          case 82:\n            // Get shipping details to pass to Stripe\n            shipping = getShippingDetails(); // Confirm payment using the Payment Element\n            _context.next = 85;\n            return stripe.confirmPayment({\n              elements: elements,\n              confirmParams: {\n                // Return to checkout success page after payment\n                return_url: returnUrl,\n                shipping: shipping,\n                receipt_email: getFieldValue('email')\n              },\n              redirect: 'if_required'\n            });\n          case 85:\n            _yield$stripe$confirm = _context.sent;\n            error = _yield$stripe$confirm.error;\n            if (error) {\n              // Handle payment confirmation error\n              if (error.type === 'card_error' || error.type === 'validation_error') {\n                showError(error.message);\n              } else if (error.type === 'invalid_request_error' && (error.code === 'payment_intent_unexpected_state' || error.message.includes('is not available') || error.message.includes('payment_intent'))) {\n                // Handle payment intent issues\n                clearClientSecretData();\n                handlePaymentIntentIssue('The payment session has expired. Please refresh the page to continue.');\n              } else {\n                showError('An unexpected error occurred.');\n                console.error('Payment error:', error);\n              }\n\n              // Reset form state\n              isSubmitting = false;\n              submitButton.disabled = false;\n              if (buttonText) buttonText.classList.remove('d-none');\n              if (spinner) spinner.classList.add('d-none');\n              if (loadingOverlay) loadingOverlay.style.display = 'none';\n            } else {\n              // The payment has been processed!\n              console.log('Payment processing completed, form will be submitted');\n\n              // Add payment intent ID to form if available\n              paymentIntentIdField = document.getElementById('id_payment_intent_id');\n              if (paymentIntentIdField && clientSecret) {\n                paymentIntentIdField.value = clientSecret.split('_secret')[0];\n              }\n\n              // Update payment method type in form if needed\n              paymentMethodTypeField = document.getElementById('id_payment_method_type');\n              if (paymentMethodTypeField) {\n                // Default to 'card' if not specified\n                paymentMethodTypeField.value = 'card';\n              }\n\n              // Clear session storage as payment is being processed\n              clearClientSecretData();\n\n              // Submit the form to complete order processing\n              form.submit();\n            }\n            _context.next = 99;\n            break;\n          case 90:\n            _context.prev = 90;\n            _context.t3 = _context[\"catch\"](16);\n            console.error('Error in checkout process:', _context.t3);\n            // Show error to user\n            showError(_context.t3.message || 'An unexpected error occurred. Please try again.');\n\n            // Reset form state\n            isSubmitting = false;\n            submitButton.disabled = false;\n            if (buttonText) buttonText.classList.remove('d-none');\n            if (spinner) spinner.classList.add('d-none');\n            if (loadingOverlay) loadingOverlay.style.display = 'none';\n          case 99:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[16, 90], [25, 55], [29, 35], [65, 77]]);\n    }));\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n\n  /**\n   * Get shipping details from form fields\n   * @returns {Object} Shipping details for Stripe\n   */\n  function getShippingDetails() {\n    return {\n      name: \"\".concat(getFieldValue('shipping_first_name'), \" \").concat(getFieldValue('shipping_last_name')).trim(),\n      address: {\n        line1: getFieldValue('shipping_address1'),\n        line2: getFieldValue('shipping_address2') || undefined,\n        city: getFieldValue('shipping_city'),\n        state: getFieldValue('shipping_state'),\n        postal_code: getFieldValue('shipping_zipcode'),\n        country: getFieldValue('shipping_country') || 'US'\n      }\n    };\n  }\n\n  // Auto-propagate contact info to shipping when empty\n  var contactFields = [{\n    source: 'first_name',\n    target: 'shipping_first_name'\n  }, {\n    source: 'last_name',\n    target: 'shipping_last_name'\n  }];\n  contactFields.forEach(function (pair) {\n    var sourceField = document.getElementById(\"id_\".concat(pair.source));\n    var targetField = document.getElementById(\"id_\".concat(pair.target));\n    if (sourceField && targetField) {\n      sourceField.addEventListener('change', function () {\n        if (!targetField.value) {\n          targetField.value = sourceField.value;\n          // Billing check removed to eliminate error\n        }\n      });\n    }\n  });\n\n  // Run initial cart verification\n  verifyCartTotal();\n\n  // Listen for resize events which might change the iframe size\n  window.addEventListener('resize', function () {\n    // Use debounce technique to prevent too many adjustments\n    clearTimeout(window.resizeTimer);\n    window.resizeTimer = setTimeout(function () {\n      adjustContainerHeight();\n      enhanceContainerHeightAdjustment();\n    }, 200);\n  });\n  console.log('Checkout script with Payment Element initialization complete');\n});\n\n//# sourceURL=webpack://skunkmonkey/./shop/static/js/shop/checkout.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./shop/static/js/shop/checkout.js"]();
/******/ 	
/******/ })()
;