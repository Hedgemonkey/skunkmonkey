/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./shop/static/js/shop/cart-manager.js":
/*!*********************************************!*\
  !*** ./shop/static/js/shop/cart-manager.js ***!
  \*********************************************/
/***/ (() => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * CartManager - handles all cart functionality\n * Manages adding, removing, and updating items in the shopping cart\n */\nvar CartManager = /*#__PURE__*/function () {\n  function CartManager() {\n    _classCallCheck(this, CartManager);\n    this.initEventListeners();\n    this.cartContainer = document.getElementById('cart-container');\n    this.cartTotal = document.getElementById('cart-total');\n    this.cartCount = document.getElementById('cart-count');\n    this.cartCountBadge = document.querySelector('.cart-count-badge');\n  }\n\n  /**\n   * Initialize all event listeners\n   * Sets up event handlers for adding, updating and removing cart items\n   */\n  return _createClass(CartManager, [{\n    key: \"initEventListeners\",\n    value: function initEventListeners() {\n      var _this = this;\n      // Handle add to cart form submissions\n      document.querySelectorAll('.add-to-cart-form').forEach(function (form) {\n        form.addEventListener('submit', _this.handleAddToCart.bind(_this));\n      });\n\n      // Handle quantity update form submissions\n      document.querySelectorAll('.update-cart-form').forEach(function (form) {\n        form.addEventListener('submit', _this.handleUpdateSubmit.bind(_this));\n      });\n\n      // Handle remove item links\n      document.querySelectorAll('.remove-cart-item').forEach(function (link) {\n        link.addEventListener('click', _this.handleRemoveItem.bind(_this));\n      });\n\n      // Handle quantity buttons on product detail page\n      this.initQuantityButtons();\n    }\n\n    /**\n     * Initialize quantity selector controls for product detail page\n     * Sets up increment/decrement functionality with quantity limits\n     */\n  }, {\n    key: \"initQuantityButtons\",\n    value: function initQuantityButtons() {\n      var _this2 = this;\n      var quantityInput = document.getElementById('quantity');\n      var decreaseBtn = document.getElementById('decrease-quantity');\n      var increaseBtn = document.getElementById('increase-quantity');\n      if (decreaseBtn && increaseBtn && quantityInput) {\n        decreaseBtn.addEventListener('click', function () {\n          var currentValue = parseInt(quantityInput.value);\n          if (currentValue > 1) {\n            quantityInput.value = currentValue - 1;\n          }\n        });\n        increaseBtn.addEventListener('click', function () {\n          var currentValue = parseInt(quantityInput.value);\n          var maxValue = parseInt(quantityInput.getAttribute('max'));\n          if (currentValue < maxValue) {\n            quantityInput.value = currentValue + 1;\n          } else {\n            _this2.showNotification('Maximum Quantity', \"Sorry, only \".concat(maxValue, \" units available.\"), 'info');\n          }\n        });\n      }\n    }\n\n    /**\n     * Handle adding a product to cart\n     * @param {Event} event - The form submit event\n     */\n  }, {\n    key: \"handleAddToCart\",\n    value: function handleAddToCart(event) {\n      var _form$closest,\n        _this3 = this;\n      event.preventDefault();\n      var form = event.target;\n      var url = form.action;\n      var formData = new FormData(form);\n      var productName = ((_form$closest = form.closest('.product-info')) === null || _form$closest === void 0 || (_form$closest = _form$closest.querySelector('h1')) === null || _form$closest === void 0 ? void 0 : _form$closest.textContent) || 'Product';\n      var button = form.querySelector('button[type=\"submit\"]');\n      this.showNotification('Adding to Cart...', 'Please wait...', 'info', false);\n      this.sendAjaxRequest(url, formData, 'POST', function (response) {\n        if (response.success) {\n          // Add animation to the add to cart button\n          if (button) {\n            button.classList.add('add-to-cart-animation');\n            setTimeout(function () {\n              button.classList.remove('add-to-cart-animation');\n            }, 1500);\n          }\n\n          // Update cart count\n          if (_this3.cartCount) {\n            _this3.cartCount.textContent = response.cart_count;\n            _this3.cartCount.classList.add('cart-count-updated');\n            setTimeout(function () {\n              _this3.cartCount.classList.remove('cart-count-updated');\n            }, 500);\n          }\n\n          // Update cart badge in navbar if it exists\n          if (_this3.cartCountBadge) {\n            _this3.cartCountBadge.textContent = response.cart_count;\n            _this3.cartCountBadge.classList.remove('d-none');\n          }\n          _this3.showNotification('Added to Cart!', \"\".concat(productName, \" has been added to your cart.\"), 'success', true, {\n            showDenyButton: true,\n            denyButtonText: 'View Cart',\n            denyButtonColor: '#198754',\n            confirmButtonText: 'Continue Shopping'\n          }).then(function (result) {\n            if (result.isDenied) {\n              window.location.href = '/shop/cart/';\n            }\n          });\n        }\n      });\n    }\n\n    /**\n     * Handle cart item quantity update\n     * @param {Event} event - The form submit event\n     */\n  }, {\n    key: \"handleUpdateSubmit\",\n    value: function handleUpdateSubmit(event) {\n      var _this4 = this;\n      event.preventDefault();\n      var form = event.target;\n      var url = form.action;\n      var formData = new FormData(form);\n      this.sendAjaxRequest(url, formData, 'POST', function (response) {\n        if (response.success) {\n          // Update the item subtotal\n          var row = form.closest('tr');\n          var subtotalCell = row.querySelector('.item-subtotal');\n          if (subtotalCell) {\n            subtotalCell.textContent = \"$\".concat(response.item_subtotal);\n            subtotalCell.classList.add('highlight-update');\n            setTimeout(function () {\n              subtotalCell.classList.remove('highlight-update');\n            }, 1000);\n          }\n\n          // Update cart total\n          if (_this4.cartTotal) {\n            _this4.cartTotal.textContent = \"$\".concat(response.cart_total);\n            _this4.cartTotal.classList.add('highlight-update');\n            setTimeout(function () {\n              _this4.cartTotal.classList.remove('highlight-update');\n            }, 1000);\n          }\n\n          // Update cart count badge if it exists\n          if (_this4.cartCountBadge) {\n            _this4.cartCountBadge.textContent = response.cart_count;\n          }\n          _this4.showNotification('Cart Updated', 'Your cart has been updated successfully.', 'success', true, {\n            timer: 2000,\n            timerProgressBar: true,\n            showConfirmButton: false\n          });\n        }\n      });\n    }\n\n    /**\n     * Handle removing an item from the cart\n     * @param {Event} event - The click event\n     */\n  }, {\n    key: \"handleRemoveItem\",\n    value: function handleRemoveItem(event) {\n      var _this5 = this;\n      event.preventDefault();\n      var link = event.currentTarget;\n      var url = link.href;\n      var productName = link.dataset.productName || 'this item';\n      this.showConfirmation('Remove Item?', \"Are you sure you want to remove \".concat(productName, \" from your cart?\"), function () {\n        _this5.sendAjaxRequest(url, null, 'GET', function (response) {\n          if (response.success) {\n            // Add fade-out animation to the row\n            var row = link.closest('tr');\n            row.classList.add('fade-out');\n            setTimeout(function () {\n              // Remove the row from the table\n              row.remove();\n\n              // Update cart total\n              if (_this5.cartTotal) {\n                _this5.cartTotal.textContent = \"$\".concat(response.cart_total);\n              }\n\n              // Update cart count badge in navbar if it exists\n              if (_this5.cartCountBadge) {\n                if (response.cart_count > 0) {\n                  _this5.cartCountBadge.textContent = response.cart_count;\n                } else {\n                  _this5.cartCountBadge.classList.add('d-none');\n                }\n              }\n\n              // If cart is empty, refresh the page to show empty state\n              if (response.cart_count === 0) {\n                window.location.reload();\n              }\n            }, 300);\n            _this5.showNotification('Item Removed', \"\".concat(productName, \" has been removed from your cart.\"), 'success');\n          }\n        });\n      });\n    }\n\n    /**\n     * Show a confirmation dialog before removing item\n     * @param {string} title - The dialog title\n     * @param {string} message - The dialog message\n     * @param {Function} confirmCallback - Function to call when confirmed\n     */\n  }, {\n    key: \"showConfirmation\",\n    value: function showConfirmation(title, message, confirmCallback) {\n      if (typeof Swal !== 'undefined') {\n        Swal.fire({\n          title: title,\n          text: message,\n          icon: 'question',\n          showCancelButton: true,\n          confirmButtonColor: '#dc3545',\n          cancelButtonColor: '#6c757d',\n          confirmButtonText: 'Yes, remove it',\n          cancelButtonText: 'No, keep it'\n        }).then(function (result) {\n          if (result.isConfirmed) {\n            confirmCallback();\n          }\n        });\n      } else if (confirm(message)) {\n        confirmCallback();\n      }\n    }\n\n    /**\n     * Send an AJAX request for cart operations\n     * @param {string} url - The URL to send the request to\n     * @param {FormData|null} data - Form data to send, or null for GET requests\n     * @param {string} method - HTTP method (GET, POST, etc.)\n     * @param {Function} successCallback - Function to call on success\n     */\n  }, {\n    key: \"sendAjaxRequest\",\n    value: function sendAjaxRequest(url, data, method, successCallback) {\n      var _this6 = this;\n      var options = {\n        method: method,\n        headers: {\n          'X-Requested-With': 'XMLHttpRequest'\n        }\n      };\n      if (data && method === 'POST') {\n        options.body = data;\n      }\n      fetch(url, options).then(function (response) {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      }).then(function (data) {\n        if (data.success) {\n          successCallback(data);\n        } else if (data.error) {\n          _this6.showNotification('Error', data.error, 'error');\n        }\n      })[\"catch\"](function (error) {\n        console.error('Error:', error);\n        _this6.showNotification('Error', 'There was a problem updating your cart.', 'error');\n      });\n    }\n\n    /**\n     * Show notifications using SweetAlert when available, fallback to alert\n     * @param {string} title - The notification title\n     * @param {string} message - The notification message\n     * @param {string} type - The notification type (success, error, info)\n     * @param {boolean} autoClose - Whether to auto-close the notification\n     * @param {Object} options - Additional SweetAlert options\n     * @returns {Promise} SweetAlert promise or resolved promise for alert fallback\n     */\n  }, {\n    key: \"showNotification\",\n    value: function showNotification(title, message, type) {\n      var autoClose = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n      if (typeof Swal !== 'undefined') {\n        return Swal.fire(_objectSpread({\n          title: title,\n          text: message,\n          icon: type,\n          confirmButtonColor: '#0d6efd'\n        }, options));\n      } else {\n        alert(\"\".concat(title, \": \").concat(message));\n        return Promise.resolve();\n      }\n    }\n  }]);\n}(); // Initialize the cart manager when the DOM is loaded\ndocument.addEventListener('DOMContentLoaded', function () {\n  window.cartManager = new CartManager();\n});\n\n//# sourceURL=webpack://skunkmonkey/./shop/static/js/shop/cart-manager.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./shop/static/js/shop/cart-manager.js"]();
/******/ 	
/******/ })()
;