/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./shop/static/js/shop/product-list-manager.js":
/*!*****************************************************!*\
  !*** ./shop/static/js/shop/product-list-manager.js ***!
  \*****************************************************/
/***/ (() => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Product List Manager\n * Manages product filtering, sorting and AJAX loading for the shop product list\n * Also handles product grid interactions like wishlist toggling\n */\nvar ProductListManager = /*#__PURE__*/function () {\n  function ProductListManager() {\n    var _this = this;\n    _classCallCheck(this, ProductListManager);\n    // Initialize with error handling\n    try {\n      // Initialize product grid interaction features\n      this.initializeProductGridFeatures();\n      this.filterContainer = document.getElementById('dynamic-filter-container');\n      if (!this.filterContainer) {\n        console.warn('Product List Manager: dynamic-filter-container not found in the DOM');\n        // Continue anyway as we might just be on a page with product grid but no filters\n      }\n\n      // Get URLs from data attributes with validation\n      if (this.filterContainer) {\n        this.productListUrl = this.filterContainer.dataset.productListUrl;\n        if (!this.productListUrl) {\n          console.warn('Product List Manager: No product list URL provided in data-product-list-url attribute');\n          this.productListUrl = window.location.href; // Fallback to current URL\n        }\n\n        // Initial filter state with safety checks\n        this.filterState = {\n          search: (this.filterContainer.dataset.searchQuery || '').trim(),\n          category: (this.filterContainer.dataset.currentCategory || '').trim(),\n          sort: 'name-asc'\n        };\n\n        // Initialize DOM element references for filtering\n        this.initializeFilterDomReferences();\n\n        // Only proceed with filter setup if essential elements are present\n        if (this.hasEssentialFilterElements()) {\n          this.initializeFilterControls();\n          this.bindFilterEvents();\n          this.updateFilterUI();\n\n          // Delay initial product fetch to ensure DOM is fully ready\n          setTimeout(function () {\n            _this.fetchProducts();\n          }, 100);\n        }\n      }\n    } catch (err) {\n      console.error('Error initializing Product List Manager:', err);\n    }\n  }\n\n  /**\n   * Initialize product grid interaction features\n   */\n  return _createClass(ProductListManager, [{\n    key: \"initializeProductGridFeatures\",\n    value: function initializeProductGridFeatures() {\n      var _this2 = this;\n      try {\n        // Position wishlist buttons correctly\n        this.positionWishlistButtons();\n\n        // Add event listeners for product grid interactions\n        document.addEventListener('click', function (event) {\n          var wishlistBtn = event.target.closest('.add-to-wishlist-btn');\n          if (wishlistBtn) {\n            _this2.handleWishlistButtonClick(event, wishlistBtn);\n          }\n        });\n\n        // Re-position elements on window resize\n        window.addEventListener('resize', function () {\n          _this2.positionWishlistButtons();\n        });\n\n        // Re-position elements when products are loaded via AJAX\n        document.addEventListener('productsLoaded', function () {\n          _this2.positionWishlistButtons();\n        });\n      } catch (err) {\n        console.error('Error initializing product grid features:', err);\n      }\n    }\n\n    /**\n     * Initialize all DOM element references for filtering\n     */\n  }, {\n    key: \"initializeFilterDomReferences\",\n    value: function initializeFilterDomReferences() {\n      // Essential elements\n      this.productGridContainer = document.getElementById('product-grid-container');\n\n      // Filter elements\n      this.searchInput = document.querySelector('.filter-search');\n      this.sortSelect = document.querySelector('.filter-sort');\n      this.categorySelect = document.querySelector('.filter-category');\n      this.clearSearchBtn = document.querySelector('.clear-search');\n      this.resetAllBtn = document.querySelector('.reset-all-filters');\n      this.filterToggleBtn = document.querySelector('.filter-toggle');\n      this.filterOptions = document.getElementById('filterOptions');\n\n      // Display elements\n      this.searchDisplay = document.querySelector('.search-display');\n      this.searchTerm = document.querySelector('.search-term');\n      this.searchTermSummary = document.querySelector('.search-term-summary');\n      this.searchSummary = document.querySelector('.search-summary');\n      this.categoriesDisplay = document.querySelector('.categories-display');\n      this.categoryCountDisplay = document.querySelector('.category-count-display');\n      this.categoriesSummary = document.querySelector('.categories-summary');\n      this.categoryCountSummary = document.querySelector('.category-count-summary');\n      this.categoryTagsContainer = document.getElementById('selectedCategoriesTags');\n      this.clearCategoriesBtn = document.querySelector('.clear-categories-btn');\n      this.itemCountDisplay = document.querySelector('.item-count');\n      this.productCountDisplay = document.getElementById('product-count');\n    }\n\n    /**\n     * Check if essential filter elements are present\n     */\n  }, {\n    key: \"hasEssentialFilterElements\",\n    value: function hasEssentialFilterElements() {\n      if (!this.productGridContainer) {\n        console.warn('Product List Manager: product-grid-container not found in the DOM');\n        return false;\n      }\n      return true;\n    }\n\n    /**\n     * Initialize filter controls including sorting and filtering\n     */\n  }, {\n    key: \"initializeFilterControls\",\n    value: function initializeFilterControls() {\n      try {\n        // Initialize sorting\n        var urlParams = new URLSearchParams(window.location.search);\n        var sortParam = urlParams.get('sort');\n        if (this.sortSelect && sortParam) {\n          this.sortSelect.value = sortParam;\n          this.filterState.sort = sortParam;\n        }\n\n        // Initialize category select if using a multi-select plugin\n        if (this.categorySelect) {\n          if (typeof $ !== 'undefined' && $.fn && typeof $.fn.select2 !== 'undefined') {\n            try {\n              $(this.categorySelect).select2({\n                placeholder: \"Select Categories\",\n                allowClear: true,\n                width: '100%'\n              });\n            } catch (selectError) {\n              console.warn('Error initializing Select2:', selectError);\n            }\n          }\n        }\n      } catch (err) {\n        console.error('Error initializing controls:', err);\n      }\n    }\n\n    /**\n     * Bind event listeners to filter DOM elements with error handling\n     */\n  }, {\n    key: \"bindFilterEvents\",\n    value: function bindFilterEvents() {\n      var _this3 = this;\n      try {\n        if (this.searchInput) {\n          this.searchInput.addEventListener('input', this.handleSearchInput.bind(this));\n        }\n        if (this.sortSelect) {\n          this.sortSelect.addEventListener('change', this.handleSortChange.bind(this));\n        }\n        if (this.categorySelect) {\n          this.categorySelect.addEventListener('change', this.handleCategoryChange.bind(this));\n        }\n        if (this.clearSearchBtn) {\n          this.clearSearchBtn.addEventListener('click', this.handleClearSearch.bind(this));\n        }\n        if (this.clearCategoriesBtn) {\n          this.clearCategoriesBtn.addEventListener('click', this.handleClearCategories.bind(this));\n        }\n        if (this.resetAllBtn) {\n          this.resetAllBtn.addEventListener('click', this.handleResetAll.bind(this));\n        }\n        if (this.filterToggleBtn) {\n          this.filterToggleBtn.addEventListener('click', this.handleFilterToggle.bind(this));\n        }\n\n        // Document-level event delegation for dynamic elements with error handling\n        document.addEventListener('click', function (event) {\n          try {\n            // Handle click on search summary close button\n            if (event.target.closest('.search-summary .btn-close')) {\n              _this3.handleClearSearch();\n            }\n\n            // Handle click on categories summary close button\n            if (event.target.closest('.categories-summary .btn-close')) {\n              _this3.handleClearCategories();\n            }\n\n            // Handle tag remove button click\n            if (event.target.closest('.tag-remove')) {\n              var categoryId = event.target.closest('.tag-remove').dataset.categoryId;\n              if (categoryId) {\n                _this3.removeCategoryById(categoryId);\n              }\n            }\n          } catch (eventError) {\n            console.error('Error handling click event:', eventError);\n          }\n        });\n      } catch (err) {\n        console.error('Error binding events:', err);\n      }\n    }\n\n    /**\n     * Handle search input changes\n     */\n  }, {\n    key: \"handleSearchInput\",\n    value: function handleSearchInput(event) {\n      var _this4 = this;\n      try {\n        this.filterState.search = event.target.value;\n        this.updateFilterUI();\n\n        // Debounce for performance\n        clearTimeout(this.searchTimer);\n        this.searchTimer = setTimeout(function () {\n          _this4.fetchProducts();\n        }, 300);\n      } catch (err) {\n        console.error('Error handling search input:', err);\n      }\n    }\n\n    /**\n     * Handle sort selection changes\n     */\n  }, {\n    key: \"handleSortChange\",\n    value: function handleSortChange(event) {\n      try {\n        this.filterState.sort = event.target.value;\n        this.updateFilterUI();\n        this.fetchProducts();\n      } catch (err) {\n        console.error('Error handling sort change:', err);\n      }\n    }\n\n    /**\n     * Handle category selection changes\n     */\n  }, {\n    key: \"handleCategoryChange\",\n    value: function handleCategoryChange(event) {\n      try {\n        var selectedCategories = [];\n\n        // Handle different selection types\n        if (event.target.selectedOptions) {\n          selectedCategories = Array.from(event.target.selectedOptions).map(function (opt) {\n            return opt.value;\n          });\n        } else if (event.target.options && event.target.multiple) {\n          selectedCategories = Array.from(event.target.options).filter(function (opt) {\n            return opt.selected;\n          }).map(function (opt) {\n            return opt.value;\n          });\n        } else if (event.target.value) {\n          selectedCategories = [event.target.value];\n        }\n        this.filterState.category = selectedCategories.join(',');\n        this.updateFilterUI();\n        this.fetchProducts();\n      } catch (err) {\n        console.error('Error handling category change:', err);\n      }\n    }\n\n    /**\n     * Clear search term\n     */\n  }, {\n    key: \"handleClearSearch\",\n    value: function handleClearSearch() {\n      try {\n        this.filterState.search = '';\n        if (this.searchInput) this.searchInput.value = '';\n        this.updateFilterUI();\n        this.fetchProducts();\n      } catch (err) {\n        console.error('Error clearing search:', err);\n      }\n    }\n\n    /**\n     * Clear category selections\n     */\n  }, {\n    key: \"handleClearCategories\",\n    value: function handleClearCategories() {\n      try {\n        this.filterState.category = '';\n        if (this.categorySelect) {\n          if (typeof $ !== 'undefined' && $.fn && typeof $.fn.select2 !== 'undefined') {\n            try {\n              $(this.categorySelect).val(null).trigger('change');\n            } catch (selectError) {\n              console.warn('Error with Select2 clearing:', selectError);\n              // Fallback to standard DOM operation if Select2 fails\n              Array.from(this.categorySelect.options).forEach(function (opt) {\n                return opt.selected = false;\n              });\n            }\n          } else {\n            Array.from(this.categorySelect.options).forEach(function (opt) {\n              return opt.selected = false;\n            });\n          }\n        }\n        this.updateFilterUI();\n        this.fetchProducts();\n      } catch (err) {\n        console.error('Error clearing categories:', err);\n      }\n    }\n\n    /**\n     * Reset all filters to default values\n     */\n  }, {\n    key: \"handleResetAll\",\n    value: function handleResetAll() {\n      try {\n        this.filterState = {\n          search: '',\n          category: '',\n          sort: 'name-asc'\n        };\n        if (this.searchInput) this.searchInput.value = '';\n        if (this.sortSelect) {\n          this.sortSelect.value = 'name-asc';\n        }\n        if (this.categorySelect) {\n          if (typeof $ !== 'undefined' && $.fn && typeof $.fn.select2 !== 'undefined') {\n            try {\n              $(this.categorySelect).val(null).trigger('change');\n            } catch (selectError) {\n              console.warn('Error with Select2 resetting:', selectError);\n              // Fallback\n              Array.from(this.categorySelect.options).forEach(function (opt) {\n                return opt.selected = false;\n              });\n            }\n          } else {\n            Array.from(this.categorySelect.options).forEach(function (opt) {\n              return opt.selected = false;\n            });\n          }\n        }\n        this.updateFilterUI();\n        this.fetchProducts();\n      } catch (err) {\n        console.error('Error resetting filters:', err);\n      }\n    }\n\n    /**\n     * Toggle filter visibility\n     */\n  }, {\n    key: \"handleFilterToggle\",\n    value: function handleFilterToggle() {\n      try {\n        if (!this.filterOptions) return;\n        var isCollapsed = this.filterOptions.classList.contains('show');\n        this.filterOptions.classList.toggle('show');\n        if (this.filterToggleBtn) {\n          this.filterToggleBtn.classList.toggle('collapsed', !isCollapsed);\n          this.filterToggleBtn.setAttribute('aria-expanded', isCollapsed ? 'false' : 'true');\n          var toggleText = this.filterToggleBtn.querySelector('.filter-toggle-text');\n          if (toggleText) {\n            toggleText.textContent = isCollapsed ? 'Show Filters' : 'Hide Filters';\n          }\n        }\n      } catch (err) {\n        console.error('Error toggling filter visibility:', err);\n      }\n    }\n\n    /**\n     * Remove a specific category by ID\n     */\n  }, {\n    key: \"removeCategoryById\",\n    value: function removeCategoryById(categoryId) {\n      try {\n        if (!categoryId) return;\n        var categoryIds = this.filterState.category.split(',').filter(function (c) {\n          return c;\n        });\n        var updatedCategoryIds = categoryIds.filter(function (id) {\n          return id !== categoryId;\n        });\n        this.filterState.category = updatedCategoryIds.join(',');\n\n        // Update select element\n        if (this.categorySelect) {\n          if (typeof $ !== 'undefined' && $.fn && typeof $.fn.select2 !== 'undefined') {\n            try {\n              $(this.categorySelect).val(updatedCategoryIds).trigger('change');\n            } catch (selectError) {\n              console.warn('Error with Select2 category removal:', selectError);\n              // Fallback\n              Array.from(this.categorySelect.options).forEach(function (opt) {\n                opt.selected = updatedCategoryIds.includes(opt.value);\n              });\n            }\n          } else {\n            Array.from(this.categorySelect.options).forEach(function (opt) {\n              opt.selected = updatedCategoryIds.includes(opt.value);\n            });\n          }\n        }\n\n        // Update UI and fetch new results\n        this.updateUI();\n        this.fetchProducts();\n      } catch (err) {\n        console.error('Error removing category:', err);\n      }\n    }\n\n    /**\n     * Update UI elements based on current filter state\n     */\n  }, {\n    key: \"updateFilterUI\",\n    value: function updateFilterUI() {\n      try {\n        // Update search display\n        if (this.searchTerm) this.searchTerm.textContent = this.filterState.search;\n        if (this.searchTermSummary) this.searchTermSummary.textContent = this.filterState.search;\n        if (this.searchDisplay) this.searchDisplay.classList.toggle('d-none', !this.filterState.search);\n        if (this.searchSummary) this.searchSummary.classList.toggle('d-none', !this.filterState.search);\n\n        // Update category display with validation\n        var categoryIds = this.filterState.category ? this.filterState.category.split(',').filter(function (c) {\n          return c;\n        }) : [];\n        var categoryCount = categoryIds.length;\n        if (this.categoryCountDisplay) this.categoryCountDisplay.textContent = categoryCount;\n        if (this.categoryCountSummary) this.categoryCountSummary.textContent = categoryCount;\n        if (this.categoriesDisplay) this.categoriesDisplay.classList.toggle('d-none', categoryCount === 0);\n        if (this.categoriesSummary) this.categoriesSummary.classList.toggle('d-none', categoryCount === 0);\n\n        // Update category tags\n        this.updateCategoryTags();\n      } catch (err) {\n        console.error('Error updating UI:', err);\n      }\n    }\n\n    /**\n     * Update category tags display\n     */\n  }, {\n    key: \"updateCategoryTags\",\n    value: function updateCategoryTags() {\n      var _this5 = this;\n      try {\n        if (!this.categoryTagsContainer || !this.categorySelect) return;\n        this.categoryTagsContainer.innerHTML = '';\n        if (!this.filterState.category) return;\n        var categoryIds = this.filterState.category.split(',').filter(function (c) {\n          return c;\n        });\n        if (categoryIds.length === 0) return;\n        categoryIds.forEach(function (categoryId) {\n          try {\n            var option = Array.from(_this5.categorySelect.options).find(function (opt) {\n              return opt.value === categoryId;\n            });\n            if (!option) return;\n            var categoryName = option.textContent.trim();\n            var tagDiv = document.createElement('div');\n            tagDiv.className = 'category-tag';\n            tagDiv.innerHTML = \"\\n                        <span class=\\\"tag-text\\\">\".concat(categoryName, \"</span>\\n                        <button type=\\\"button\\\" class=\\\"tag-remove\\\" data-category-id=\\\"\").concat(categoryId, \"\\\">\\n                            <i class=\\\"fas fa-times\\\"></i>\\n                        </button>\\n                    \");\n            _this5.categoryTagsContainer.appendChild(tagDiv);\n          } catch (tagError) {\n            console.warn(\"Error creating tag for category ID \".concat(categoryId, \":\"), tagError);\n          }\n        });\n      } catch (err) {\n        console.error('Error updating category tags:', err);\n      }\n    }\n\n    /**\n     * Safely test if a string is a valid URL\n     */\n  }, {\n    key: \"isValidUrl\",\n    value: function isValidUrl(urlString) {\n      try {\n        new URL(urlString);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    }\n\n    /**\n     * Get the appropriate base URL for product fetching\n     */\n  }, {\n    key: \"getBaseUrl\",\n    value: function getBaseUrl() {\n      // First try the explicitly provided URL\n      if (this.productListUrl && this.isValidUrl(this.productListUrl)) {\n        return this.productListUrl;\n      }\n\n      // If we have a relative URL, resolve it against the current page\n      if (this.productListUrl && this.productListUrl.startsWith('/')) {\n        return new URL(this.productListUrl, window.location.origin).href;\n      }\n\n      // Fallback to current URL as a last resort\n      return window.location.href;\n    }\n\n    /**\n     * Fetch products via AJAX with enhanced error handling\n     */\n  }, {\n    key: \"fetchProducts\",\n    value: function fetchProducts() {\n      var _this6 = this;\n      // Show loading state if container exists\n      if (this.productGridContainer) {\n        // Just add the loading class - the CSS will handle the spinner display\n        this.productGridContainer.classList.add('loading');\n\n        // Store the current HTML to restore in case of an error\n        this.originalGridHtml = this.productGridContainer.innerHTML;\n      }\n      try {\n        // Get base URL with proper validation\n        var baseUrl = this.getBaseUrl();\n\n        // Create URL with validation\n        var url = new URL(baseUrl);\n\n        // Add query parameters\n        if (this.filterState.search) url.searchParams.set('search', this.filterState.search);\n        if (this.filterState.category) url.searchParams.set('category', this.filterState.category);\n        if (this.filterState.sort) url.searchParams.set('sort', this.filterState.sort);\n\n        // Add timestamp to prevent caching issues\n        url.searchParams.set('_', Date.now());\n\n        // Fetch data with timeout for network issues\n        var controller = new AbortController();\n        var timeoutId = setTimeout(function () {\n          return controller.abort();\n        }, 15000); // 15 second timeout\n\n        fetch(url, {\n          method: 'GET',\n          headers: {\n            'X-Requested-With': 'XMLHttpRequest',\n            'Accept': 'application/json'\n          },\n          signal: controller.signal\n        }).then(function (response) {\n          clearTimeout(timeoutId);\n          if (!response.ok) {\n            throw new Error(\"Server returned \".concat(response.status, \": \").concat(response.statusText));\n          }\n          var contentType = response.headers.get('content-type');\n          if (!contentType || !contentType.includes('application/json')) {\n            throw new Error('Response was not JSON. Received: ' + contentType);\n          }\n          return response.json();\n        }).then(function (data) {\n          // Update product grid if container exists\n          if (_this6.productGridContainer) {\n            if (data.html) {\n              _this6.productGridContainer.innerHTML = data.html;\n            } else {\n              _this6.productGridContainer.innerHTML = '<div class=\"alert alert-info\">No products found matching your criteria.</div>';\n            }\n          }\n\n          // Update counts if elements exist\n          var count = data.count || 0;\n          if (_this6.itemCountDisplay) _this6.itemCountDisplay.textContent = count;\n          if (_this6.productCountDisplay) _this6.productCountDisplay.textContent = count;\n\n          // Trigger event for other components that might need to initialize\n          document.dispatchEvent(new CustomEvent('productsLoaded', {\n            detail: data\n          }));\n\n          // Re-position wishlist buttons after products are loaded\n          _this6.positionWishlistButtons();\n        })[\"catch\"](function (error) {\n          console.error('Error fetching products:', error);\n          var errorMessage = 'Error loading products. ';\n          if (error.name === 'AbortError') {\n            errorMessage += 'Request timed out. Please check your internet connection and try again.';\n          } else if (error.message.includes('JSON')) {\n            errorMessage += 'Unexpected response format from server.';\n          } else {\n            errorMessage += 'Please try again or contact support if the issue persists.';\n          }\n          if (_this6.productGridContainer) {\n            _this6.productGridContainer.innerHTML = \"<div class=\\\"alert alert-danger\\\">\".concat(errorMessage, \"</div>\");\n          }\n        })[\"finally\"](function () {\n          // Ensure loading class is always removed, even if there are other issues\n          if (_this6.productGridContainer) {\n            _this6.productGridContainer.classList.remove('loading');\n          }\n        });\n      } catch (error) {\n        console.error('Error constructing request:', error);\n\n        // Remove loading class and show error\n        if (this.productGridContainer) {\n          this.productGridContainer.classList.remove('loading');\n          this.productGridContainer.innerHTML = \"<div class=\\\"alert alert-danger\\\">Configuration error: \".concat(error.message, \"</div>\");\n        }\n      }\n    }\n\n    /**\n     * Handle wishlist button click\n     * @param {Event} event - Click event\n     * @param {HTMLElement} button - Wishlist button element\n     */\n  }, {\n    key: \"handleWishlistButtonClick\",\n    value: function handleWishlistButtonClick(event, button) {\n      // Prevent default to handle via AJAX instead of full page reload\n      event.preventDefault();\n      var productId = button.dataset.productId;\n      var url = button.getAttribute('href');\n\n      // Toggle wishlist heart icon\n      var heartIcon = button.querySelector('i');\n      var originalClass = heartIcon.className;\n      heartIcon.className = 'fas fa-spinner fa-spin';\n\n      // Send AJAX request to add/remove from wishlist\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'X-CSRFToken': this.getCookie('csrftoken'),\n          'Content-Type': 'application/json',\n          'X-Requested-With': 'XMLHttpRequest'\n        },\n        credentials: 'same-origin'\n      }).then(function (response) {\n        if (!response.ok) {\n          throw new Error(\"Server returned \".concat(response.status, \": \").concat(response.statusText));\n        }\n        return response.json();\n      }).then(function (data) {\n        // Update icon based on response\n        if (data.success) {\n          if (data.added) {\n            heartIcon.className = 'fas fa-heart';\n            button.classList.add('active');\n          } else {\n            heartIcon.className = 'far fa-heart';\n            button.classList.remove('active');\n          }\n        } else {\n          // If there was an error in the response\n          heartIcon.className = originalClass;\n          console.error('Error updating wishlist:', data.message || 'Unknown error');\n        }\n      })[\"catch\"](function (error) {\n        console.error('Error updating wishlist:', error);\n        heartIcon.className = originalClass;\n      });\n    }\n\n    /**\n     * Position wishlist buttons based on whether badges are present\n     */\n  }, {\n    key: \"positionWishlistButtons\",\n    value: function positionWishlistButtons() {\n      try {\n        var productCards = document.querySelectorAll('.product-card');\n        productCards.forEach(function (card) {\n          var badges = card.querySelector('.product-badges');\n          var wishlistBtn = card.querySelector('.add-to-wishlist-btn');\n          if (badges && wishlistBtn) {\n            // Check if badges container has any badges\n            var hasBadges = badges.querySelectorAll('.badge').length > 0;\n\n            // Adjust wishlist button position based on badges presence\n            if (hasBadges) {\n              wishlistBtn.style.top = 'auto';\n              wishlistBtn.style.bottom = '10px';\n              wishlistBtn.style.right = '10px';\n            } else {\n              wishlistBtn.style.top = '10px';\n              wishlistBtn.style.bottom = 'auto';\n              wishlistBtn.style.right = '10px';\n            }\n          }\n        });\n      } catch (err) {\n        console.error('Error positioning wishlist buttons:', err);\n      }\n    }\n\n    /**\n     * Get CSRF cookie for AJAX requests\n     * @param {string} name - Cookie name\n     * @returns {string} - Cookie value\n     */\n  }, {\n    key: \"getCookie\",\n    value: function getCookie(name) {\n      var cookieValue = null;\n      if (document.cookie && document.cookie !== '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n          var cookie = cookies[i].trim();\n          if (cookie.substring(0, name.length + 1) === name + '=') {\n            cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n            break;\n          }\n        }\n      }\n      return cookieValue;\n    }\n  }]);\n}();\n/**\n * Initialize the product list manager when the DOM is loaded\n * with error handling to prevent crashes\n */\ndocument.addEventListener('DOMContentLoaded', function () {\n  try {\n    window.productListManager = new ProductListManager();\n  } catch (error) {\n    console.error('Fatal error initializing Product List Manager:', error);\n    // Try to show error on page\n    var container = document.getElementById('product-grid-container');\n    if (container) {\n      container.innerHTML = '<div class=\"alert alert-danger\">There was an error initializing the product list. Please refresh the page or contact support.</div>';\n    }\n  }\n});\n\n//# sourceURL=webpack://skunkmonkey/./shop/static/js/shop/product-list-manager.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./shop/static/js/shop/product-list-manager.js"]();
/******/ 	
/******/ })()
;