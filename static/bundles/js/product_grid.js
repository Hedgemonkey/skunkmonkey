/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./static/js/product_grid.js":
/*!***********************************!*\
  !*** ./static/js/product_grid.js ***!
  \***********************************/
/***/ (() => {

eval("/**\n * Product Grid Functionality\n * Handles wishlist toggling, product filtering, and sorting\n */\ndocument.addEventListener('DOMContentLoaded', function () {\n  // Elements\n  var productGrid = document.querySelector('.product-grid');\n  var filterButtons = document.querySelectorAll('.filter-btn');\n  var sortSelect = document.getElementById('sort-options');\n\n  // Initialize tooltips if Bootstrap is available\n  if (typeof bootstrap !== 'undefined' && bootstrap.Tooltip) {\n    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\n    tooltipTriggerList.map(function (tooltipTriggerEl) {\n      return new bootstrap.Tooltip(tooltipTriggerEl);\n    });\n  }\n\n  /**\n   * Toggle wishlist status for a product\n   */\n  function setupWishlistButtons() {\n    var wishlistButtons = document.querySelectorAll('.wishlist-btn');\n    wishlistButtons.forEach(function (button) {\n      button.addEventListener('click', function (e) {\n        e.preventDefault();\n        var productId = this.getAttribute('data-product-id');\n        var heartIcon = this.querySelector('i');\n\n        // Toggle heart icon\n        if (heartIcon.classList.contains('fa-heart-o')) {\n          heartIcon.classList.replace('fa-heart-o', 'fa-heart');\n          this.classList.add('active');\n          addToWishlist(productId);\n        } else {\n          heartIcon.classList.replace('fa-heart', 'fa-heart-o');\n          this.classList.remove('active');\n          removeFromWishlist(productId);\n        }\n      });\n    });\n  }\n\n  /**\n   * Add a product to the user's wishlist\n   */\n  function addToWishlist(productId) {\n    // Get CSRF token from cookie\n    var csrfToken = getCookie('csrftoken');\n    fetch('/wishlist/add/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-CSRFToken': csrfToken\n      },\n      body: JSON.stringify({\n        product_id: productId\n      })\n    }).then(function (response) {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(function (data) {\n      if (data.success) {\n        showMessage('Product added to wishlist', 'success');\n      } else {\n        // If error or login required\n        if (data.login_required) {\n          window.location.href = '/accounts/login/?next=' + window.location.pathname;\n        } else {\n          showMessage(data.message || 'Error adding to wishlist', 'danger');\n        }\n      }\n    })[\"catch\"](function (error) {\n      console.error('Error:', error);\n      showMessage('Error adding to wishlist', 'danger');\n    });\n  }\n\n  /**\n   * Remove a product from the user's wishlist\n   */\n  function removeFromWishlist(productId) {\n    // Get CSRF token from cookie\n    var csrfToken = getCookie('csrftoken');\n    fetch('/wishlist/remove/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-CSRFToken': csrfToken\n      },\n      body: JSON.stringify({\n        product_id: productId\n      })\n    }).then(function (response) {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(function (data) {\n      if (data.success) {\n        showMessage('Product removed from wishlist', 'success');\n      } else {\n        showMessage(data.message || 'Error removing from wishlist', 'danger');\n      }\n    })[\"catch\"](function (error) {\n      console.error('Error:', error);\n      showMessage('Error removing from wishlist', 'danger');\n    });\n  }\n\n  /**\n   * Set up filtering functionality\n   */\n  function setupFilters() {\n    if (!filterButtons.length) return;\n    filterButtons.forEach(function (button) {\n      button.addEventListener('click', function () {\n        // Update active state\n        filterButtons.forEach(function (btn) {\n          return btn.classList.remove('active');\n        });\n        this.classList.add('active');\n        var filter = this.getAttribute('data-filter');\n        var productItems = document.querySelectorAll('.product-item');\n\n        // Apply filter to product items\n        productItems.forEach(function (item) {\n          if (filter === 'all') {\n            item.style.display = 'block';\n          } else if (filter === 'new') {\n            item.style.display = item.getAttribute('data-is-new') === 'true' ? 'block' : 'none';\n          } else if (filter === 'low-stock') {\n            item.style.display = item.getAttribute('data-is-low-stock') === 'true' ? 'block' : 'none';\n          }\n        });\n\n        // Check if no products are visible and show message\n        checkNoVisibleProducts();\n      });\n    });\n  }\n\n  /**\n   * Check if there are no visible products after filtering\n   */\n  function checkNoVisibleProducts() {\n    var productItems = document.querySelectorAll('.product-item');\n    var visibleCount = 0;\n    productItems.forEach(function (item) {\n      if (item.style.display !== 'none') {\n        visibleCount++;\n      }\n    });\n\n    // Get or create no-products message element\n    var noProductsEl = document.querySelector('.no-products');\n    if (visibleCount === 0) {\n      if (!noProductsEl) {\n        noProductsEl = document.createElement('div');\n        noProductsEl.className = 'no-products';\n        noProductsEl.innerHTML = '<p>No products match your filter criteria.</p>';\n        productGrid.appendChild(noProductsEl);\n      }\n      noProductsEl.style.display = 'block';\n    } else if (noProductsEl) {\n      noProductsEl.style.display = 'none';\n    }\n  }\n\n  /**\n   * Set up sorting functionality\n   */\n  function setupSorting() {\n    if (!sortSelect) return;\n    sortSelect.addEventListener('change', function () {\n      var sortBy = this.value;\n      var productItems = Array.from(document.querySelectorAll('.product-item'));\n\n      // Skip if no items to sort\n      if (productItems.length === 0) return;\n\n      // Sort product items based on selected option\n      productItems.sort(function (a, b) {\n        if (sortBy === 'price-low') {\n          return parseFloat(a.getAttribute('data-price')) - parseFloat(b.getAttribute('data-price'));\n        } else if (sortBy === 'price-high') {\n          return parseFloat(b.getAttribute('data-price')) - parseFloat(a.getAttribute('data-price'));\n        } else if (sortBy === 'name-az') {\n          return a.getAttribute('data-name').localeCompare(b.getAttribute('data-name'));\n        } else if (sortBy === 'name-za') {\n          return b.getAttribute('data-name').localeCompare(a.getAttribute('data-name'));\n        }\n\n        // Default sorting (by position in DOM)\n        return 0;\n      });\n\n      // Reorder elements in the DOM\n      var parent = productItems[0].parentNode;\n      productItems.forEach(function (item) {\n        return parent.appendChild(item);\n      });\n    });\n  }\n\n  /**\n   * Set up add to cart functionality\n   */\n  function setupAddToCart() {\n    var addToCartButtons = document.querySelectorAll('.add-to-cart-btn');\n    addToCartButtons.forEach(function (button) {\n      button.addEventListener('click', function () {\n        var _this = this;\n        if (this.disabled) return;\n        var productId = this.getAttribute('data-product-id');\n        var csrfToken = getCookie('csrftoken');\n\n        // Add loading state\n        var originalText = this.innerHTML;\n        this.innerHTML = '<span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> Adding...';\n        this.disabled = true;\n        fetch('/cart/add/', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'X-CSRFToken': csrfToken\n          },\n          body: JSON.stringify({\n            product_id: productId,\n            quantity: 1\n          })\n        }).then(function (response) {\n          if (!response.ok) {\n            throw new Error('Network response was not ok');\n          }\n          return response.json();\n        }).then(function (data) {\n          // Reset button state\n          _this.innerHTML = originalText;\n          _this.disabled = false;\n          if (data.success) {\n            showMessage('Product added to cart', 'success');\n            // Update cart count in the navbar if it exists\n            var cartCountElement = document.querySelector('.cart-count');\n            if (cartCountElement && data.cart_count) {\n              cartCountElement.textContent = data.cart_count;\n            }\n          } else {\n            showMessage(data.message || 'Error adding to cart', 'danger');\n          }\n        })[\"catch\"](function (error) {\n          // Reset button state\n          _this.innerHTML = originalText;\n          _this.disabled = false;\n          console.error('Error:', error);\n          showMessage('Error adding to cart', 'danger');\n        });\n      });\n    });\n  }\n\n  /**\n   * Helper function to get CSRF token from cookies\n   */\n  function getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n      var cookies = document.cookie.split(';');\n      for (var i = 0; i < cookies.length; i++) {\n        var cookie = cookies[i].trim();\n        if (cookie.substring(0, name.length + 1) === name + '=') {\n          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n          break;\n        }\n      }\n    }\n    return cookieValue;\n  }\n\n  /**\n   * Display messages to the user\n   */\n  function showMessage(message, type) {\n    // Check if a messages container exists, create one if not\n    var messagesContainer = document.querySelector('.messages-container');\n    if (!messagesContainer) {\n      messagesContainer = document.createElement('div');\n      messagesContainer.className = 'messages-container position-fixed top-0 end-0 p-3';\n      messagesContainer.style.zIndex = '1050';\n      document.body.appendChild(messagesContainer);\n    }\n\n    // Create alert element\n    var alertElement = document.createElement('div');\n    alertElement.className = \"alert alert-\".concat(type, \" alert-dismissible fade show\");\n    alertElement.role = 'alert';\n    alertElement.innerHTML = \"\\n            \".concat(message, \"\\n            <button type=\\\"button\\\" class=\\\"btn-close\\\" data-bs-dismiss=\\\"alert\\\" aria-label=\\\"Close\\\"></button>\\n        \");\n\n    // Add to container\n    messagesContainer.appendChild(alertElement);\n\n    // Auto-remove after 5 seconds\n    setTimeout(function () {\n      alertElement.classList.remove('show');\n      setTimeout(function () {\n        alertElement.remove();\n      }, 150);\n    }, 5000);\n  }\n\n  // Initialize all functionality if product grid exists\n  if (productGrid) {\n    setupWishlistButtons();\n    setupFilters();\n    setupSorting();\n    setupAddToCart();\n  }\n});\n\n//# sourceURL=webpack://skunkmonkey/./static/js/product_grid.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./static/js/product_grid.js"]();
/******/ 	
/******/ })()
;